#########################
#This code was written by Lillian Hislop
#2020.02.26
#WSMDP Carbohydrate Analysis
#########################
####What this code hopes to accomplish:
#exploratory work, look for outlines
#visualized data, scatter plot matrix
#output the line names for all the NIR samples,
#GET gBS DATA for all the nir sample lines
#Anova for the lines
#Do a PCA for all the samples GBS data
#Run GWAS
#########################
###Establish Workspace###
#########################
#begin by establishing a new fresh work space
rm(list=ls())
library(dplyr)
library(lme4)
library(ggplot2)#for making pretty graphs
library(ggpmisc)
library(grDevices)
library(tidyr) #for separate
library(stringr)#str_remove
library(psych)
library(reshape2)#for multiple groups in GGplot
library(outliers)
library(lattice)
library(PopGenome)
library(data.table) #for fread
# BiocManager::install("VariantAnnotation")
library("VariantAnnotation")
library("snpStats")
library("compiler") #needed to make GAPIT work
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/FarmCPU/FarmCPU_functions.txt")
library("devtools")#for intsalling from github
install_github("jendelman/GWASpoly")
library(GWASpoly)#for running Gwas
# library("bigmemory") #to make a matrix big
# library(rrBLUP)
library(emmeans)
library(bigmemory)
library(MuMIn)
library(SNPRelate)
library(beepr)#beep when code is done
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#Read in packages made for these codesets
source("R/CarbEquationComparison.R")
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
source("R/CarbOutlierCleanup.R")
source("R/CarbDataFrameVis.R")
source("R/GWASPolyVis.R")
source("R/GWASPolyRunner.R")
source("R/WritePhenoGenotoFile.R")
source("R/PCAFigureCreation.R")
source("R/hmpToNumeric.R")
#########################
###Read in sample data###
#########################
#Read in the sample information.
#this file contains information about the superblock, row, column data for each sample
BookInfo <- read.csv("Data/20142015_WSMDP_PlantingInfo_Condensation.csv")
#There are some duplicates in planting info condensation. Remove duplicates
BookInfo <- BookInfo[!duplicated(BookInfo$SampleLabel),]
length(unique(BookInfo$Inbred))
#this file containes the year, location,variety and endosperm of every sample
SampleInfo <- read.csv("Data/WSMDP_2014-2015_WINY_SampleInfo.csv")
#Fix the sample numbers that are labeled in the NY style e.g " 14A0255" or "15A0005" and change to just the row numbers
SampleInfo$Row <- SampleInfo$Sample.Number
SampleInfo$Row[which(nchar(SampleInfo$Row)>6)] <- substr(SampleInfo$Row[which(nchar(SampleInfo$Row)>6)],4,15)
tail(SampleInfo)
#Generate NIR Code. NIR codes are all YearLocationRow - Rep
SampleInfo$NIRBase <- paste(substr(SampleInfo$year,3,4), ifelse(SampleInfo$location == "Wisconsin", "W","NY"), SampleInfo$Row,sep = "")
tail(SampleInfo)
str(unique(SampleInfo$Variety))
summary.factor(SampleInfo$endo)
length(unique(SampleInfo$Variety))
setdiff(unique(BookInfo$Inbred),unique(SampleInfo$Variety))
#########Read in Wetlab Starch Data##########
wetLabStarch <- read.csv("Data/RawData/WSMDP_Wetlab_Starchs.csv")
#separate out the data that aren't controls
wetLabStarchNoCtrl<- wetLabStarch[which(wetLabStarch$Sample_ID != "control"),c(5,9:11)]
#Separate out the controls
wetLabStarchCtrl<- wetLabStarch[which(wetLabStarch$Sample_ID == "control"),c(5,9:11)]
#Establish File to Hold stats
wetLabFile <- paste0("Data/OutputtedData/WSMDP_Wetlab_stats.txt")
#Write Starch Stats to File
cat("Starch Wetlab Data", file=wetLabFile, sep="\n", append=FALSE)
out <- capture.output(summary(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Starch Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#########Read in Wetlab Sugar Data ##########
wetLabSugar <- read.csv("Data/RawData/WSMDP_Wetlab_Sugars.csv")
#set columns from char to numeric
cols <- c("Ave.Glucose","Ave.Fructose","Ave.Sucro","Ave.Total")
wetLabSugar[cols] <- lapply(wetLabSugar[cols], as.numeric)
#Separate out just useful data
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:23,25:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
wetLabSugarConj <- data.frame(Glucose,Fructose,Sucro,Total)
#Separate out just controls
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:23,25:33)]
Glucose <- c(wetLabSugarCtrl$Rep.A.Glucose, wetLabSugarCtrl$Rep.B.Glucose, wetLabSugarCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarCtrl$Rep.A.Fructose, wetLabSugarCtrl$Rep.B.Fructose, wetLabSugarCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarCtrl$Rep.A.Sucro, wetLabSugarCtrl$Rep.B.Sucro, wetLabSugarCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarCtrl$Rep.A.Total, wetLabSugarCtrl$Rep.B.Total, wetLabSugarCtrl$Rep.C.Total )
wetLabSugarControlConj <- data.frame(Glucose,Fructose,Sucro,Total)
#Write Sugar Stats to File
cat("Sugar Wetlab Data", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Sugar Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarControlConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarControlConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#########Read in the output from NIR##########
####Copied pasted and modified from Hislop_carb_eqn_validation.R
#6 files types. The starch and sugar predictions and the equations made by calibrating with only high wsp lines, high wsp var sug, high wsp high sug
CarbCombos <- c("hwspsu","hwspst","lwspwfsu","lwspwfst","lwspnfsu","lwspwfst")
#establish DF to hold the file readins
CarbDF <- list()
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(i in 1:6){CarbDF[[i]] <- read.csv(paste("Data/RawData/wsmdp",CarbCombos[i],"pls_predA-G.txt",sep = ""), skip = 9)}
#########################
###Manipulate and clean sample data###
#########################
########now match up these predicted values with the sample info and mash it all up into one########
#combine the starch and sugar files for each equation type. Condense takes all the repeated scans of the same sample and averages them
HWSPsDF <- AgPredOutput(StarchDF = CarbDF[[1]], SugDF = CarbDF[[2]], condense = TRUE)
LWSPWFsDF <- AgPredOutput(StarchDF = CarbDF[[3]], SugDF = CarbDF[[4]], condense = TRUE)
LWSPNFsDF <- AgPredOutput(StarchDF = CarbDF[[5]], SugDF = CarbDF[[6]], condense = TRUE)
InfoCombination <- function(NIRDF, SampleInfoDF, BookInfoDF){
OutDF <- NIRDF
OutDF$endo <- SampleInfoDF$endo[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
OutDF$Variety <- SampleInfoDF$Variety[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
OutDF$BookInbred <- BookInfoDF$Inbred[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$PlotNum <- NIRDF$Row
OutDF$SampleRep <- NIRDF$Rep
OutDF$superblock <- BookInfoDF$superblock[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$block <- BookInfoDF$block[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$EnviRep <- BookInfoDF$rep[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Row <- BookInfoDF$Row[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Col <- BookInfoDF$Col[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Check <- BookInfoDF$Check[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsFill <- BookInfoDF$IsFill[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsExperimental <- BookInfoDF$IsExperimental[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
#add in a year/location environment factor
OutDF$Envi <- paste0(BookInfoDF$Year[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)], BookInfoDF$Location[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)])
return(OutDF)
}
HWSPsDF <- InfoCombination(HWSPsDF,SampleInfo,BookInfo)
LWSPWFsDF <- InfoCombination(LWSPWFsDF,SampleInfo,BookInfo)
LWSPNFsDF <- InfoCombination(LWSPNFsDF,SampleInfo,BookInfo)
#Eliminate irrelivant endosperm mutants from each df. We don't want to include sh2 samples that were predicted by the HWSP calibrated equations
#should sh2i samples be estimated by the sh2 calibrated equations or the other calibrated equation?
HWSPs <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | (is.na(HWSPsDF$endo)& (HWSPsDF$Year== "15"|HWSPsDF$Year == "14"))),]
# HWSPs <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | is.na(HWSPsDF$endo)),]
LWSPWFs <- LWSPWFsDF[which(LWSPNFsDF$endo != "se" & LWSPNFsDF$endo != "su1"),]
LWSPNFs <- LWSPNFsDF[which(LWSPNFsDF$endo == "sh2" | LWSPNFsDF$endo == "sh2i"),]
# #lets look at the validation data that I predicted from kahtleen and Jareds data and output it for further analysis
# jared <- HWSPsDF[which(HWSPsDF$Year == "sc"),]
# write.csv(jared, file = "Data/OutputtedData/JaredsPredictedLineswHWSPeqn.csv")
# kathleen <- HWSPsDF[which(HWSPsDF$Year != "13"&HWSPsDF$Year != "14"&HWSPsDF$Year != "15"&HWSPsDF$Year != "sc"),]
# write.csv(kathleen,file = "Data/OutputtedData/KathleenPredictedLineswHWSPeqn.csv")
#
########mash it all together ######
#All the predictions with the field lines
CarbInfoExpandedWFDF <- rbind(HWSPs,LWSPWFs)
#all the predictions without the field lines
CarbInfoExpandedNFDF <- rbind(HWSPs,LWSPNFs)
#visualize these data sets pre cleaning
CarbDataFrameVis(CarbInfoExpandedWFDF,"WithField_WithOutliers")
CarbDataFrameVis(CarbInfoExpandedNFDF,"NoField_WithOutliers")
#clean up the predictive data frames. Reassign or delete outliers
CleanedInfoWF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedWFDF,"WF",alpha = 0.05)
CleanedInfoNF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedNFDF,"NF",alpha = 0.05)
CleanedInfoWF <- subset(CleanedInfoWF_wexcess, !is.na(IsExperimental))
CleanedInfoNF <- subset(CleanedInfoNF_wexcess, !is.na(IsExperimental))
write.csv(file = "Data/OutputtedData/CleanedInfoWFOutput.csv",CleanedInfoWF)
write.csv(file = "Data/OutputtedData/CleanedInfoNFOutput.csv",CleanedInfoNF)
# #revisualize the dataframes
# CarbDataFrameVis(CleanedInfoWF,"WithField_Cleaned")
# CarbDataFrameVis(CleanedInfoNF,"NoField_Cleaned")
#
# #write the names of the varieties used to a csv file so we can find the corresponding GBS data
# write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataNF.csv",unique(CleanedInfoNF[c("Variety", "endo")]))
# write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataWF.csv",unique(CleanedInfoWF[c("Variety", "endo")]))
#
# #########################
# ###Validate that the NIR Equation is good###
# #########################
#
# #######Equation Validation!##############
# #Now I have a variable that has all the projected values, for the values used to calibrate the equations. WHat are the statistics on that?
# #set carb to a number 1:7. carb <- c(Fructose, Glucose, Sucrose, Total Sugar, Starch, Total Polysaccharide, WSP)
# #this functions needs to have the data frame set up so the carbs being compared are directly next to eachother
# EqnStats <- function(DF){
#
#   #establish dataframe used to record stats
#   Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
#                     RMSEP = rep(NA,7),
#                     bias = rep(NA,7),
#                     SEE = rep(NA,7),
#                     slope = rep(NA,7),
#                     intercept = rep(NA,7),
#                     R2 = rep(NA,7))
#   dfpos <- c(2,4,6,8,10,12,14)
#   for(carb in 1:7){
#     #Calculated the RMSEP
#     Out$RMSEP[carb] <- sqrt(sum((DF[,dfpos[carb]]- DF[,dfpos[carb]-1])^2, na.rm = TRUE)/dim(DF)[1])
#     #Calculate the Bias
#     Out$bias[carb] <- mean(DF[,dfpos[carb]], na.rm = TRUE) - mean(DF[,dfpos[carb]-1],na.rm = TRUE)
#     #Calculated the SEE
#     Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
#     Out$Carb[carb] <- colnames(DF[dfpos[carb]])
#   }
#   return(Out)
# }
#
#
# #Visualize these
# R2Vis <- function(DF, label, Out){
#   dfpos <- c(2,4,6,8,10,12,14)
#   Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP")
#   for(i in 1:7){
#     carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
#     carbFileName <- paste("Figures/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
#     png(carbFileName)
#     par(mfrow=c(1,1))
#     print(summary(carbCompare))
#     rsqua <- summary(carbCompare)$r.squared
#     plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
#          pch = 16,
#          xlab = paste(Carb[i]," wetlab (%)",sep = ""),
#          ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
#          main = paste("Actual Vs Predicted ",Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3,sep = ""))
#     abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
#     # text(15,max(Prediction[,i])-5,labels = paste("r^2 =",trunc(rsqua*10^3)/10^3))
#
#     Out$slope[i] <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
#     Out$intercept[i] <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
#     Out$R2[i] <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
#
#
#     dev.off()
#   }
#   return(Out)
# }
#
#
# ######Visualize the validation. Look at all the samples that were wetlabbed and used to calibrate the equation
# wetlab <- read.csv("Data/WSMDP_Wetlab_StarchSugarData_FormatedForWinISI_WithR.csv")
# wetlabDF <- wetlab[,c(1,6:8,3,2,4,5)]
#
# WLLabels <- c("Samples","Starch_WL","Total.Polysaccharides_WL", "WSP_WL","Glucose_WL","Fructose_WL","Sucrose_WL","Total.Sugar_WL")
# colnames(wetlabDF) <- WLLabels
#
# WFWL <- merge(CleanedInfoWF, wetlabDF, by = "Samples")
# NFWL <- merge(CleanedInfoNF, wetlabDF, by = "Samples")
# alternatingorder <- c(1,5,28,6,29,7,30,8,31,9,32,10,33,11,34)
# WFWLdf <- WFWL[,alternatingorder]
# NFWLdf <- NFWL[,alternatingorder]
# WFWLdfEqnStatsR <- R2Vis(WFWLdf[,2:15], "CleanedWSPeqnWF_PredVsWetlab_for_Calibration_Samples", EqnStats(WFWLdf[,2:15]))
# NFWLdfEqnStatsR <- R2Vis(NFWLdf[,2:15], "CleanedWSPeqnNF_PredVsWetlab_for_Calibration_Samples", EqnStats(NFWLdf[,2:15]))
#
# write.csv(WFWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsAllWetlabWF.csv")
# write.csv(NFWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsAllWetlabNF.csv")
#
# ######Visualize the validation. Only the samples that were NOT used to create the equation
# valwetlab <- read.csv("Data/WSMDP_EqnValidation_Wetlab_Data.csv")
# valwetlabDF <- valwetlab[-2]
# colnames(valwetlabDF)[1] <- "Samples"
#
# WFValWL <- merge(CleanedInfoWF, valwetlabDF, by = "Samples")
# NFValWL <- merge(CleanedInfoNF, valwetlabDF, by = "Samples")
# WFValWLdf <- WFValWL[,alternatingorder]
# NFValWLdf <- NFValWL[,alternatingorder]
# WFValWLdfEqnStatsR <- R2Vis(WFValWLdf[,2:15], "CleanedWSPeqnWF_PredVsWetlab_ValidationSubset", EqnStats(WFValWLdf[,2:15]))
# NFValWLdfEqnStatsR <- R2Vis(NFValWLdf[,2:15], "CleanedWSPeqnNF_PredVsWetlab_ValidationSubset", EqnStats(NFValWLdf[,2:15]))
#
# write.csv(WFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF.csv")
# write.csv(NFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF.csv")
#
#
# ####With Jared WetlabDATA
# # HWSPsJ <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | is.na(HWSPsDF$endo)),]
# # alternatingorder2 <- c(1,5,26,6,27,7,28,8,29,9,30,10,31,11,32)
# # CarbInfoExpandedWFJDF <- rbind(HWSPsJ,LWSPWFs)
# # CarbInfoExpandedNFJDF <- rbind(HWSPsJ,LWSPNFs)
# # WFValWLJ <- merge(CarbInfoExpandedWFJDF, valwetlabDF, by = "Samples")
# # NFValWLJ <- merge(CarbInfoExpandedNFJDF, valwetlabDF, by = "Samples")
# # WFValWLJdf <- WFValWLJ[,alternatingorder2]
# # NFValWLJdf <- NFValWLJ[,alternatingorder2]
# # WFValWLdfJEqnStatsR <- R2Vis(WFValWLJdf[,2:15], "UnCleanedWSPeqnWF_PredVsWetlab_ValidationSubset_WJared", EqnStats(WFValWLdf[,2:15]))
# # NFValWLdfJEqnStatsR <- R2Vis(NFValWLJdf[,2:15], "UnCleanedWSPeqnNF_PredVsWetlab_ValidationSubset_WJared", EqnStats(NFValWLdf[,2:15]))
# #
# # write.csv(WFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF_WJared.csv")
# # write.csv(NFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF_WJared.csv")
#########################
###Linear Model Analysis###
#########################
linearmodel <- function(SampleDFtoModel,TitleAddendum){
cols <- c('superblock','Col', 'Row', 'Year', 'Envi', 'Check', 'block', 'Rep', 'endo', 'PlotNum' )
SampleDFtoModel[cols] <- lapply(SampleDFtoModel[cols], as.factor)
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
blupHolder <- data.frame("Variety" = sort(unique(SampleDFtoModel$BookInbred)))
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
carbs <- colnames(SampleDFtoModel)[c1:c2]
VarDF <- data.frame("Carb" = colnames(SampleDFtoModel)[5:11],"Variety" = rep(NA,7),"Envi" = rep(NA,7),"Variety:Envi" = rep(NA,7),  "superblock" = rep(NA,7), "Col" = rep(NA,7),"Row" = rep(NA,7),"block" = rep(NA,7),"Residuals"= rep(NA,7))
for(j in 1:length(carbs)){
#output the statistics about this trait
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpastecheck<-  paste0(carbs[j], " ~ (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
model <- lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(model@optinfo$optimizer=="nloptwrap")) {
model <- update(model, control=strict_tol)
}
RandomEffects <- ranef(model)
tempBlup <- data.frame("Variety" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Variety", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
# CheckAssumptions
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
#calculate model R2
r2 <- r.squaredGLMM(model)
out <- capture.output(r2[2])
cat(paste("The r^2 value of this model for", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
# Calculate hertiability
model_variances <- as.data.frame(VarCorr(model))
#broad sence heritability calculated as variance of genotype/ (variance of geno + var of gxe / num of enviornments + var of error/num of replicates and environ)
h2 <- model_variances$vcov[2]/(model_variances$vcov[2]+(model_variances$vcov[1]/4)+(model_variances$vcov[8]/8))
out <- capture.output(h2)
cat(paste("The heritability of", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
#Compare model with one with Endosperm
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpasteendo<-  paste0(carbs[j], " ~ (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
modelendo <- lmer(modelpasteendo,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(modelendo@optinfo$optimizer=="nloptwrap")) {
modelendo <- update(modelendo, control=strict_tol)
}
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
formula1 <- paste0(colnames(SampleDFtoModel)[j+4],"~ BookInbred*Envi  + superblock%in%Envi + superblock%in%block%in%Envi+ Row%in%Envi+ Col%in%Envi")
fit1 <- lm(formula1,data=SampleDFtoModel)
AIC1 <- extractAIC(fit1)
AIC1
summary(fit1)$r.square
print(anova(fit1))
out <- anova(fit1)
SStotal <- sum(out$`Sum Sq`)
for(i in 1:8){
#variance explained is caluclated by the sum of squares divided by the sum of squares total
VarDF[j,i+1] <- (out$`Sum Sq`[i]/SStotal)}
}
#######Graph the different variances explained by different factors######
VarDFMelt <- reshape2::melt(VarDF)
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,".png",sep=""), width = 1000, height = 500)
print(barchart(~value|variable, group = factor(Carb), data= VarDFMelt,reverse.rows = FALSE,main = "Percent Phenotypic Variance Explained",layout = c(8,1),
key = simpleKey(text = colnames(SampleDFtoModel)[5:11],
rectangles = TRUE, points = FALSE, space = "right")))
dev.off()
#######Graph the different variances explained by different factors with GGPlot ######
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,"_ggplot.png",sep=""), width = 1000, height = 500)
p <- ggplot(VarDFMelt, aes(y = Carb, value)) +
geom_bar(aes(fill = variable),stat = "identity",  position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
print(p)
dev.off()
#Write the variances to a file
write.table(VarDF, file = paste0("Data/OutputtedData/WSMDP_CarbPheno_Anova_Variances_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
return(blupHolder)
}
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
