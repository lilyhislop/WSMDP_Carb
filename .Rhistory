# WFValWL <- merge(CleanedInfoWF, valwetlabDF, by = "Samples")
# NFValWL <- merge(CleanedInfoNF, valwetlabDF, by = "Samples")
# WFValWLdf <- WFValWL[,alternatingorder]
# NFValWLdf <- NFValWL[,alternatingorder]
# WFValWLdfEqnStatsR <- R2Vis(WFValWLdf[,2:15], "CleanedWSPeqnWF_PredVsWetlab_ValidationSubset", EqnStats(WFValWLdf[,2:15]))
# NFValWLdfEqnStatsR <- R2Vis(NFValWLdf[,2:15], "CleanedWSPeqnNF_PredVsWetlab_ValidationSubset", EqnStats(NFValWLdf[,2:15]))
#
# write.csv(WFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF.csv")
# write.csv(NFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF.csv")
#
#
# ####With Jared WetlabDATA
# # HWSPsJ <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | is.na(HWSPsDF$endo)),]
# # alternatingorder2 <- c(1,5,26,6,27,7,28,8,29,9,30,10,31,11,32)
# # CarbInfoExpandedWFJDF <- rbind(HWSPsJ,LWSPWFs)
# # CarbInfoExpandedNFJDF <- rbind(HWSPsJ,LWSPNFs)
# # WFValWLJ <- merge(CarbInfoExpandedWFJDF, valwetlabDF, by = "Samples")
# # NFValWLJ <- merge(CarbInfoExpandedNFJDF, valwetlabDF, by = "Samples")
# # WFValWLJdf <- WFValWLJ[,alternatingorder2]
# # NFValWLJdf <- NFValWLJ[,alternatingorder2]
# # WFValWLdfJEqnStatsR <- R2Vis(WFValWLJdf[,2:15], "UnCleanedWSPeqnWF_PredVsWetlab_ValidationSubset_WJared", EqnStats(WFValWLdf[,2:15]))
# # NFValWLdfJEqnStatsR <- R2Vis(NFValWLJdf[,2:15], "UnCleanedWSPeqnNF_PredVsWetlab_ValidationSubset_WJared", EqnStats(NFValWLdf[,2:15]))
# #
# # write.csv(WFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF_WJared.csv")
# # write.csv(NFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF_WJared.csv")
#########################
###Linear Model Analysis###
#########################
linearmodel <- function(SampleDFtoModel,TitleAddendum){
cols <- c('superblock','Col', 'Row', 'Year', 'Envi', 'Check', 'block', 'Rep', 'endo', 'PlotNum' )
SampleDFtoModel[cols] <- lapply(SampleDFtoModel[cols], as.factor)
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
blupHolder <- data.frame("Variety" = sort(unique(SampleDFtoModel$BookInbred)))
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
carbs <- colnames(SampleDFtoModel)[c1:c2]
VarDF <- data.frame("Carb" = colnames(SampleDFtoModel)[5:11],"Variety" = rep(NA,7),"Envi" = rep(NA,7),"Variety:Envi" = rep(NA,7),  "superblock" = rep(NA,7), "Col" = rep(NA,7),"Row" = rep(NA,7),"block" = rep(NA,7),"Residuals"= rep(NA,7))
for(j in 1:length(carbs)){
#output the statistics about this trait
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpastecheck<-  paste0(carbs[j], " ~ (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
model <- lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(model@optinfo$optimizer=="nloptwrap")) {
model <- update(model, control=strict_tol)
}
RandomEffects <- ranef(model)
tempBlup <- data.frame("Variety" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Variety", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
# CheckAssumptions
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
#calculate model R2
r2 <- r.squaredGLMM(model)
out <- capture.output(r2[2])
cat(paste("The r^2 value of this model for", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
# Calculate hertiability
model_variances <- as.data.frame(VarCorr(model))
#broad sence heritability calculated as variance of genotype/ (variance of geno + var of gxe / num of enviornments + var of error/num of replicates and environ)
h2 <- model_variances$vcov[2]/(model_variances$vcov[2]+(model_variances$vcov[1]/4)+(model_variances$vcov[8]/8))
out <- capture.output(h2)
cat(paste("The heritability of", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
#Compare model with one with Endosperm
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpasteendo<-  paste0(carbs[j], " ~ (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
modelendo <- lmer(modelpasteendo,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(modelendo@optinfo$optimizer=="nloptwrap")) {
modelendo <- update(modelendo, control=strict_tol)
}
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
formula1 <- paste0(colnames(SampleDFtoModel)[j+4],"~ BookInbred*Envi  + superblock%in%Envi + superblock%in%block%in%Envi+ Row%in%Envi+ Col%in%Envi")
fit1 <- lm(formula1,data=SampleDFtoModel)
AIC1 <- extractAIC(fit1)
AIC1
summary(fit1)$r.square
print(anova(fit1))
out <- anova(fit1)
SStotal <- sum(out$`Sum Sq`)
for(i in 1:8){
#variance explained is caluclated by the sum of squares divided by the sum of squares total
VarDF[j,i+1] <- (out$`Sum Sq`[i]/SStotal)}
}
#######Graph the different variances explained by different factors######
VarDFMelt <- reshape2::melt(VarDF)
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,".png",sep=""), width = 1000, height = 500)
print(barchart(~value|variable, group = factor(Carb), data= VarDFMelt,reverse.rows = FALSE,main = "Percent Phenotypic Variance Explained",layout = c(8,1),
key = simpleKey(text = colnames(SampleDFtoModel)[5:11],
rectangles = TRUE, points = FALSE, space = "right")))
dev.off()
#######Graph the different variances explained by different factors with GGPlot ######
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,"_ggplot.png",sep=""), width = 1000, height = 500)
p <- ggplot(VarDFMelt, aes(y = Carb, value)) +
geom_bar(aes(fill = variable),stat = "identity",  position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
print(p)
dev.off()
#Write the variances to a file
write.table(VarDF, file = paste0("Data/OutputtedData/WSMDP_CarbPheno_Anova_Variances_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
return(blupHolder)
}
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
CleanedInfoHWSP_wexcess <- CarbOutlierCleanup(HWSPs,"HWSP",alpha = 0.05)
CleanedInfoLWSPNF_wexcess <- CarbOutlierCleanup(LWSPNFs,"LWSPNFs",alpha = 0.05)
CleanedInfoLWSPWF_wexcess <- CarbOutlierCleanup(LWSPWFs,"LWSPWFs",alpha = 0.05)
CleanedInfoHWSP <- subset(CleanedInfoHWSP_wexcess, !is.na(IsExperimental))
CleanedInfoLWSPNF <- subset(CleanedInfoLWSPNF_wexcess, !is.na(IsExperimental))
CleanedInfoLWSPWF <- subset(CleanedInfoLWSPWF_wexcess, !is.na(IsExperimental))
HWSPBlups <- linearmodel(CleanedInfoHWSP,"CleanedOutliersHWSP")
LWSPNFBlups <- linearmodel(CleanedInfoLWSPNF,"CleanedOutliersLWSPNF")
LWSPWFBlups <- linearmodel(CleanedInfoLWSPWF,"CleanedOutliersLWSPWF")
#########################
###plot the gwas results###
#########################
GWASPolyRunVersion <- paste0("NoFixedEffect_FDRThresh_",Sys.Date())
DataSet <- "NFBLUP"
blups <- colnames(WFBlupsGenoJustPheno[c1:c2])
#read in genetic info post MAF
Seq <- "SeqG"
hmppath <- paste0("Data/RawData/WSMDP_",Seq,".hmp.txt")
# hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
# hmppath <- "Data/RawData/WSMDP_SeqC.hmp.txt"
geno <- fread(hmppath,skip = "rs#")
str(geno)
colnames(geno)<-gsub(colnames(geno), pattern = ":.*", replacement = "")
str(geno)
# geno <- read.csv("Data/RawData/SeqG_numericFormat.csv")
BlupGenoCleanup <- function(BlupDFName){
BlupDF <- read.csv(file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_CleanedOutliers",BlupDFName,".txt"))#, col.names=T, row.names=F)
BlupDFGeno <- merge(BlupDF,genoinfo, by = "Variety")
c1 <- which(colnames(BlupDFGeno)=="Starch.BLUP")
c2 <- which(colnames(BlupDFGeno)=="Total.Sugar.BLUP")
c3 <- which(colnames(BlupDFGeno)=="GenoName")
c4 <- which(colnames(BlupDFGeno)=="endo")
#remove rows with no geno information and remove rows that are duplicates.
#TODO:Check which duplicates are being deleted and if its a good choice
# BlupDFGeno <- BlupDFGeno[-which(BlupDFGeno$GenoName == ""),]
# BlupDFGeno <- BlupDFGeno[-which(BlupDFGeno$GenoName == "0"),]
BlupDFGeno <- BlupDFGeno[-which(is.na(BlupDFGeno$GenoName)),]
if(length(which(is.na(BlupDFGeno$endo)))>0){
BlupDFGeno <- BlupDFGeno[-which(is.na(BlupDFGeno$endo)),]}
BlupDFGeno <- BlupDFGeno %>% distinct(GenoName, .keep_all = TRUE)
#seperate out superflous information
BlupDFGenoJustPheno <- BlupDFGeno[,c(c3,c1:c2,c4)]
BlupDFGenoJustPheno$endo <- as.factor(BlupDFGenoJustPheno$endo)
return(BlupDFGenoJustPheno)
}
WFBlupsGenoJustPheno <- BlupGenoCleanup("WF")
NFBlupsGenoJustPheno <- BlupGenoCleanup("NF")
HWSPBlupsGenoJustPheno <- BlupGenoCleanup("HWSP")
LWSPNFBlupsGenoJustPheno <- BlupGenoCleanup("LWSPNF")
LWSPWFBlupsGenoJustPheno <- BlupGenoCleanup("LWSPWF")
c1 <- which(colnames(WFBlupsGenoJustPheno)=="Starch.BLUP")
# c1 <- which(colnames(WFBlupsGenoJustPheno)=="Glucose.BLUP")
c2 <- which(colnames(WFBlupsGenoJustPheno)=="Total.Sugar.BLUP")
blups <- colnames(WFBlupsGenoJustPheno[c1:c2])
# genoinfo <- read.csv("Data/WSMDP_Inbreds.txt",head = FALSE)
genoinfo <- read.csv("Data/WSMDP_Inbreds_2021.6.30.csv",head = TRUE)
# colnames(genoinfo) <- c("Variety","","","","","","","GenoName","source","endo","notes","Region","Program")
colnames(genoinfo) <- c("Index","Variety","Planting2019","Planting20142015","SCMVTest","CAP","Sugar2019","GBS","endo","GenoName")
test1 <- which(genoinfo$Planting20142015==1)
test2 <- which(!is.na(genoinfo$GenoName))
intersect(test1,test2)
#read in genetic info post MAF
Seq <- "SeqG"
hmppath <- paste0("Data/RawData/WSMDP_",Seq,".hmp.txt")
# hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
# hmppath <- "Data/RawData/WSMDP_SeqC.hmp.txt"
geno <- fread(hmppath,skip = "rs#")
str(geno)
colnames(geno)<-gsub(colnames(geno), pattern = ":.*", replacement = "")
str(geno)
# geno <- read.csv("Data/RawData/SeqG_numericFormat.csv")
BlupGenoCleanup <- function(BlupDFName){
BlupDF <- read.csv(file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_CleanedOutliers",BlupDFName,".txt"))#, col.names=T, row.names=F)
BlupDFGeno <- merge(BlupDF,genoinfo, by = "Variety")
c1 <- which(colnames(BlupDFGeno)=="Starch.BLUP")
c2 <- which(colnames(BlupDFGeno)=="Total.Sugar.BLUP")
c3 <- which(colnames(BlupDFGeno)=="GenoName")
c4 <- which(colnames(BlupDFGeno)=="endo")
#remove rows with no geno information and remove rows that are duplicates.
#TODO:Check which duplicates are being deleted and if its a good choice
# BlupDFGeno <- BlupDFGeno[-which(BlupDFGeno$GenoName == ""),]
# BlupDFGeno <- BlupDFGeno[-which(BlupDFGeno$GenoName == "0"),]
BlupDFGeno <- BlupDFGeno[-which(is.na(BlupDFGeno$GenoName)),]
if(length(which(is.na(BlupDFGeno$endo)))>0){
BlupDFGeno <- BlupDFGeno[-which(is.na(BlupDFGeno$endo)),]}
BlupDFGeno <- BlupDFGeno %>% distinct(GenoName, .keep_all = TRUE)
#seperate out superflous information
BlupDFGenoJustPheno <- BlupDFGeno[,c(c3,c1:c2,c4)]
BlupDFGenoJustPheno$endo <- as.factor(BlupDFGenoJustPheno$endo)
return(BlupDFGenoJustPheno)
}
WFBlupsGenoJustPheno <- BlupGenoCleanup("WF")
NFBlupsGenoJustPheno <- BlupGenoCleanup("NF")
HWSPBlupsGenoJustPheno <- BlupGenoCleanup("HWSP")
LWSPNFBlupsGenoJustPheno <- BlupGenoCleanup("LWSPNF")
LWSPWFBlupsGenoJustPheno <- BlupGenoCleanup("LWSPWF")
c1 <- which(colnames(WFBlupsGenoJustPheno)=="Starch.BLUP")
# c1 <- which(colnames(WFBlupsGenoJustPheno)=="Glucose.BLUP")
c2 <- which(colnames(WFBlupsGenoJustPheno)=="Total.Sugar.BLUP")
blups <- colnames(WFBlupsGenoJustPheno[c1:c2])
blups
#########################
###plot the gwas results###
#########################
GWASPolyRunVersion <- paste0("EndoFixedEffect_FDRThresh_",Sys.Date())
DataSet <- "NFBLUP"
#establish DF to hold the file readins
QTLDF <- list()
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(blup in blups){QTLDF[[i]] <- reat.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_",Thresh,"_QTLs.csv", sep = ""))}
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(blup in blups){QTLDF[[i]] <- read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_",Thresh,"_QTLs.csv", sep = ""))}
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(trait in blups){QTLDF[[i]] <- read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_",Thresh,"_QTLs.csv", sep = ""))}
paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_FDR_QTLs.csv", sep = "")
read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_FDR_QTLs.csv", sep = ""))
#Put these files into a dataframe
#This is the originally created filename
# for(trait in blups){QTLDF[[i]] <- read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_",Thresh,"_QTLs.csv", sep = ""))}
for(trait in blups){QTLDF[[i]] <- read.table(paste0("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_SeqGNFBLUPEndoFixedEffect_FDRThresh_2021-08-19_",trait,"_FDR_QTLs.csv"))}
for(blup in blups){
# GWASPolyRunner(WFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_",Sys.Date()),Seq,"WFBLUP")
# GWASPolyRunner(WFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_",Sys.Date()),Seq,"WFBLUP","endo","factor", "permute")
# GWASPolyRunner(WFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_",Sys.Date()),Seq,"WFBLUP","endo","factor", "M.eff")
#
# GWASPolyRunner(NFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"NFBLUP")
GWASPolyRunner(NFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"NFBLUP","endo","factor")
# GWASPolyRunner(HWSPBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"HWSPBlups")
# GWASPolyRunner(HWSPBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"WFBLUP","endo","factor")
#
# GWASPolyRunner(LWSPNFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPNFBlups")
# GWASPolyRunner(LWSPNFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPNFBlups","endo","factor")
#
# GWASPolyRunner(LWSPWFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPWFBlups")
# GWASPolyRunner(LWSPWFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPWFBlups","endo","factor")
}
#establish DF to hold the file readins
QTLDF <- list()
Thresh = "FDR"
#Put these files into a dataframe
#This is the originally created filename
for(trait in blups){QTLDF[[i]] <- read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",trait,"_",Thresh,"_QTLs.csv", sep = ""))}
trait
blups
#Put these files into a dataframe
#This is the originally created filename
for(blup in blups){QTLDF[[i]] <- read.table(paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blup,"_",Thresh,"_QTLs.csv", sep = ""))}
blup
blups <- colnames(WFBlupsGenoJustPheno[c1:c2])
QTLDF
#establish DF to hold the file readins
QTLDF <- list()
?read.table
#Put these files into a dataframe
#This is the originally created filename
for(blup in blups){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blup,"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) == 0) next
QTLDF[[i]] <- read.table(file)}
#Put these files into a dataframe
#This is the originally created filename
for(blup in blups){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blup,"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) != 0){
QTLDF[[i]] <- read.table(file)}}
file
file.size(file)
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_Fructose.BLUP_",Thresh,"_QTLs.csv", sep = "")
file
file.size(file)
#Put these files into a dataframe
#This is the originally created filename
for(blup in blups){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blup,"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) < 100){
QTLDF[[i]] <- read.table(file)}}
file
#establish DF to hold the file readins
QTLDF <- list()
Thresh = "FDR"
#Put these files into a dataframe
#This is the originally created filename
for(blup in blups){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blup,"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) > 100){
QTLDF[[i]] <- read.table(file)}}
QTLDF
blups
blups[i]
blups[1
\]
blups[1]
#Put these files into a dataframe
#This is the originally created filename
for(i in 1:7){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blups[i],"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) > 100){
QTLDF[[i]] <- read.table(file)}}
QTLDF
#establish DF to hold the file readins
QTLList <- list()
#Put these files into a dataframe
#This is the originally created filename
for(i in 1:7){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blups[i],"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) > 100){
QTLList[[i]] <- read.table(file)}}
# for(trait in blups){QTLDF[[i]] <- read.table(paste0("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_SeqGNFBLUPEndoFixedEffect_FDRThresh_2021-08-19_",trait,"_FDR_QTLs.csv"))}
QTLDF <- as.data.frame(QTLList)
QTLDF
#Put these files into a dataframe
#This is the originally created filename
for(i in 1:7){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blups[i],"_",Thresh,"_QTLs.csv", sep = "")
if (file.size(file) > 100){
QTLList[[i]] <- read.csv(file)}}
QTLList
# for(trait in blups){QTLDF[[i]] <- read.table(paste0("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_SeqGNFBLUPEndoFixedEffect_FDRThresh_2021-08-19_",trait,"_FDR_QTLs.csv"))}
QTLDF <- as.data.frame(QTLList)
# for(trait in blups){QTLDF[[i]] <- read.table(paste0("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_SeqGNFBLUPEndoFixedEffect_FDRThresh_2021-08-19_",trait,"_FDR_QTLs.csv"))}
QTLDF <- bind_rows(QTLList)
QTLDF
which(QTLDF$Model == "general")
QTLDFGen <- QTLDF[which(QTLDF$Model == "general"),]
QTLDFGen
head(geno)
genoPosInfo <- geno[3:4,]
genoPosInfo
genoPosInfo <- geno[,3:4]
genoPosInfo
genoPosInfo$pos[which(genoPosInfo == 1)]
max <- genoPosInfo$pos[which(genoPosInfo == 1)]
max
chr1Max <- max(genoPosInfo$pos[which(genoPosInfo == 1)])
chr1Max
for(chr in 1:10){
chrMax[chr] <- max(genoPosInfo$pos[which(genoPosInfo == chr)])}
chrMax <- list()
for(chr in 1:10){
chrMax[chr] <- max(genoPosInfo$pos[which(genoPosInfo == chr)])}
chrMax
QTLDFGen
# make chromosome and end1 as numeric, trait as factor
QTLDFGen$chr <- as.factor(QTLDFGen$Chrom)
QTLDFGen$pos <- as.numeric(QTLDFGen$Position)
QTLDFGen$Trait <- as.factor(QTLDFGen$Trait)
#create a new table of maize chromosome length and make it a data frame
maize_chromosomes <- cbind(chromosome = c(1:10), start = c(rep(0,10)), end = c(307041717, 243907191, 235667834, 246994605, 223902240, 174033170, 182381542, 181122637, 159769782, 150982314))
maize_chromosomes <- data.frame(maize_chromosomes)
str(maize_chromosomes)
#create a new table of maize chromosome length and make it a data frame
maize_chromosomes <- cbind(chromosome = c(1:10), start = c(rep(0,10)), end = chrMax)
maize_chromosomes <- data.frame(maize_chromosomes)
str(maize_chromosomes)
#create a new table of maize chromosome length and make it a data frame
maize_chromosomes <- cbind(chromosome = c(1:10), start = c(rep(0,10)), end = c(chrMax))
maize_chromosomes <- data.frame(maize_chromosomes)
str(maize_chromosomes)
chrMax <- vector()
for(chr in 1:10){
chrMax[chr] <- max(genoPosInfo$pos[which(genoPosInfo == chr)])}
# make chromosome and end1 as numeric, trait as factor
QTLDFGen$chr <- as.factor(QTLDFGen$Chrom)
chrMax
# make chromosome and end1 as numeric, trait as factor
QTLDFGen$chr <- as.factor(QTLDFGen$Chrom)
QTLDFGen$pos <- as.numeric(QTLDFGen$Position)
QTLDFGen$Trait <- as.factor(QTLDFGen$Trait)
#create a new table of maize chromosome length and make it a data frame
maize_chromosomes <- cbind(chromosome = c(1:10), start = c(rep(0,10)), end = c(chrMax))
maize_chromosomes <- data.frame(maize_chromosomes)
str(maize_chromosomes)
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#6A3D9A", "#A6CEE3", "#B2DF8A", "#FB9A99", "#E31A1C", "#FDBF6F", "#B15928", "#FFCC33", "#33A02C", "#FF7F00", "#1F78B4", "#CAB2D6"))
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#6A3D9A",  "#FFCC33", "#33A02C", "#FB9A99", "#E31A1C", "#FDBF6F", "#B15928"))
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "##0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "#0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
png(paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",GWASPolyRunVersion,"_",DataSet,"_AllQTLPosition_GeneralModel.png"))
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "#0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
png(paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",GWASPolyRunVersion,"_",DataSet,"_AllQTLPosition_GeneralModel.png"),width = 500,height =500)
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "#0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
dev.off()
png(paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",GWASPolyRunVersion,"_",DataSet,"_AllQTLPosition_GeneralModel.png"),width = 750,height =750)
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=10)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "#0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
dev.off()
