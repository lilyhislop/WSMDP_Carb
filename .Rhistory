while(counter < end){
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%. I is ",counter,sep = ""))
if(is.na(CarbDataFrame[PosOutliers[counter],CarbDFPos]))
{
print(paste("The",colnames(CarbDataFrame[CarbDFPos]),"content of sample", CarbDataFrame$DFPosition[PosOutliers[counter]], "is NA. Skip this sample."))
}
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),]
#how much of an outlier is it?
outlierData <- grubbs.test(pull(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),colnames(CarbDataFrame[CarbDFPos])]))
if(!is.na(outlierData$p.value ) && !is.na(pull(CarbDataFrame[PosOutliers[counter],CarbDFPos]))){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
#if the summation stat is also an outlierr, then add the sample to the to remove list. If the summation isn't an outlier, set the carb and summation carb to NA
#test summation carb (total poly or total sugar) by seeing if its greater than standard deviations from the mean
polySD <- sd(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
polymean <- mean(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
OutlierPoly <- pull(CarbDataFrame[PosOutliers[counter],CarbSumPos])
#Check if the carb's summation stat is also an outlier. (Total.Poly or Total.Sugar) It is more than 3 sd from the mean?
if((polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly) && !is.na(OutlierPoly)){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
# The total summationation stat is not an outlier
if((polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly) || is.na(OutlierPoly)){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Nulled"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<- NA
CarbDataFrame[PosOutliers[i],CarbSumPos]<- NA
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is not an outlier. The Sample will have its ",colnames(CarbDataFrame[CarbDFPos])," and ",colnames(outlierincontext[CarbSumPos])," set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the the carb to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("It is not an outlier among all",PosOutliersVar[[1]][i], "lines.",colnames(CarbDataFrame[CarbDFPos])," has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("There are not enough",PosOutliersVar[[1]][i], "samples to determine if it is an outlier. ",colnames(CarbDataFrame[CarbDFPos])," has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
}
colnames(ProbSamples) <- c("Position", colnames(CarbDataFrame[PosOutliers[i],Subset]),"Edit")
write.csv(file = "Data/OutputtedData/EdittedSampleRecords.csv",ProbSamples)
write.csv(file = "Data/OutputtedData/EdittedSampleRecords.csv",ProbSamples)
sink()
source("R/CarbOutlierCleanup.R")
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF,alpha = 0.05)
?order
c = 1
#Carb being analyzed and the relevant summation carb
if(c < 4){CarbSumPos  = StarchPos+1}
if(c > 3 ){CarbSumPos = SugarPos}
CarbDFPos <- c+StarchPos - 1
CarbDataFrame$DFPosition <- rownames(CarbDataFrame)
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame[CarbDFPos], decreasing = TRUE),]
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame[CarbDFPos], decreasing = TRUE),]
CarbDataFrame
summary(CarbDataFrame[CarbDFPos])
carbSummary <- summary(CarbDataFrame[CarbDFPos])
quantile(CarbDataFrame[CarbDFPos])
quantile(CarbDataFrame[CarbDFPos],na.rm = TRUE)
CarbSummary <- quantile(CarbDataFrame[CarbDFPos],na.rm = TRUE)
CarbSummary <- quantile(CarbDataFrame[CarbDFPos],na.rm = TRUE)
CarbSummary[2]
IQR <- CarbSummary[4]-CarbSummary[2]
IQR
UpperWisk <- CarbSummary[4]+1.5*IQR
UpperWisk
CarbDataFrame[CarbDFPos]
PosOutliers <- which(CarbDataFrame[CarbDFPos] > UpperWisk)
PosOutliers
PosOutliersVar
CarbDataFrame
CarbDataFrame[PosOutliers,"Variety"]
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
PosOutliersVar
head(CarbDataFrame[PosOutliers, Subset])
CarbDataFrame <- CarbInfoExpandedDF
toremove <- c()
#make sure the original positions of the samples are recorded before we go futtzing around with them
CarbDataFrame$DFPosition <- rownames(CarbDataFrame)
VarietyPos <- which(colnames(CarbDataFrame) == "Variety")
SamplesPos <- which(colnames(CarbDataFrame) == "Samples")
StarchPos <- which(colnames(CarbDataFrame) == "Starch")
SugarPos <- which(colnames(CarbDataFrame) == "Total.Sugar")
#establish outlier record dataframe
ProbSamples <- data.frame()
#lets get just the sample, variety and carb info positions
Subset <- c(SamplesPos,c(StarchPos:SugarPos), VarietyPos)
#For each outlier to be analyzed, lets record what we are doing to it
recordKeeping <- function(Action){
out <- data.frame(CarbDataFrame$DFPosition[i],CarbDataFrame[PosOutliers[i],Subset],Action)
names(out) <- names(ProbSamples)
ProbSamples <- rbind(ProbSamples,out)
return(ProbSamples)
}
##########Iterate through Carb lower Outliers First##########
Carbs <- c("Starch","Total.Polysaccharides", "WSP","Glucose","Fructose","Sucrose","Total.Sugar")
for(c in 1:length(Carbs)){
#Carb being analyzed and the relevant summation carb
if(c < 4){CarbSumPos  = StarchPos+1}
if(c > 3 ){CarbSumPos = SugarPos}
CarbDFPos <- c+StarchPos - 1
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame[CarbDFPos]),]
PosOutliers <- which(CarbDataFrame[CarbDFPos] < 0)
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#lets look at each potential outlier within the context of the the other examples of that variety.
while(counter < end){
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%.",sep = ""))
if(is.na(CarbDataFrame[PosOutliers[counter],CarbDFPos]))
{
print(paste("The",colnames(CarbDataFrame[CarbDFPos]),"content of sample", CarbDataFrame$DFPosition[PosOutliers[counter]], "is NA. Skip this sample."))
}
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),]
#how much of an outlier is it?
outlierData <- grubbs.test(pull(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),colnames(CarbDataFrame[CarbDFPos])]))
if(!is.na(outlierData$p.value ) && !is.na(pull(CarbDataFrame[PosOutliers[counter],CarbDFPos]))){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
#if the summation stat is also an outlierr, then add the sample to the to remove list. If the summation isn't an outlier, set the carb and summation carb to NA
#test summation carb (total poly or total sugar) by seeing if its greater than standard deviations from the mean
polySD <- sd(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
polymean <- mean(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
OutlierPoly <- pull(CarbDataFrame[PosOutliers[counter],CarbSumPos])
#Check if the carb's summation stat is also an outlier. (Total.Poly or Total.Sugar) It is more than 3 sd from the mean?
if((polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly) && !is.na(OutlierPoly)){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
# The total summationation stat is not an outlier
if((polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly) || is.na(OutlierPoly)){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Nulled"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<- NA
CarbDataFrame[PosOutliers[i],CarbSumPos]<- NA
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is not an outlier. The Sample will have its ",colnames(CarbDataFrame[CarbDFPos])," and ",colnames(outlierincontext[CarbSumPos])," set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the the carb to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("It is not an outlier among all",PosOutliersVar[[1]][i], "lines.",colnames(CarbDataFrame[CarbDFPos])," has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("There are not enough",PosOutliersVar[[1]][i], "samples to determine if it is an outlier. ",colnames(CarbDataFrame[CarbDFPos])," has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
}
c = 1
#Carb being analyzed and the relevant summation carb
if(c < 4){CarbSumPos  = StarchPos+1}
if(c > 3 ){CarbSumPos = SugarPos}
CarbDFPos <- c+StarchPos - 1
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame[CarbDFPos], decreasing = TRUE),]
CarbDataFrame
#what entries are above the 2.698S SD?
CarbSummary <- quantile(CarbDataFrame[CarbDFPos],na.rm = TRUE)
IQR <- CarbSummary[4]-CarbSummary[2]
UpperWisk <- CarbSummary[4]+1.5*IQR
UpperWisk
#ok, what are the samples that are above that upper wisker
PosOutliers <- which(CarbDataFrame[CarbDFPos] > UpperWisk)
PosOutliers
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%.",sep = ""))
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%. The upper wisker is at ", UpperWisk,sep = ""))
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%. The upper wisker is at ", round(UpperWisk,2),"%.",sep = ""))
is.na(CarbDataFrame[PosOutliers[counter],CarbDFPos]
)
CarbDataFrame[PosOutliers[counter],CarbDFPos]
print(paste("The",colnames(CarbDataFrame[CarbDFPos]),"content of sample", CarbDataFrame$DFPosition[PosOutliers[counter]], "is NA. Skip this sample."))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),]
#how much of an outlier is it?
outlierData <- grubbs.test(pull(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),colnames(CarbDataFrame[CarbDFPos])]))
outlierincontext
outlierData
!is.na(outlierData$p.value ) && !is.na(pull(CarbDataFrame[PosOutliers[counter],CarbDFPos]))
outlierData$p.value < alpha
#if the summation stat is also an outlierr, then add the sample to the to remove list. If the summation isn't an outlier, set the carb and summation carb to NA
#test summation carb (total poly or total sugar) by seeing if its greater than standard deviations from the mean
polySD <- sd(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
polymean <- mean(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
OutlierPoly <- pull(CarbDataFrame[PosOutliers[counter],CarbSumPos])
polymean
polySD
OutlierPoly
(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly) && !is.na(OutlierPoly)
(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly) || is.na(OutlierPoly)
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Nulled"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<- NA
CarbDataFrame[PosOutliers[i],CarbSumPos]<- NA
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is not an outlier. The Sample will have its ",colnames(CarbDataFrame[CarbDFPos])," and ",colnames(outlierincontext[CarbSumPos])," set to NA"))
CarbDataFrame[PosOutliers[i],CarbDFPos]
CarbDataFrame[PosOutliers[i],]
###########now lets look at the upper outliers##################
Carbs <- c("Starch","Total.Polysaccharides", "WSP","Glucose","Fructose","Sucrose","Total.Sugar")
for(c in 1:length(Carbs)){
#Carb being analyzed and the relevant summation carb
if(c < 4){CarbSumPos  = StarchPos+1}
if(c > 3 ){CarbSumPos = SugarPos}
CarbDFPos <- c+StarchPos - 1
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame[CarbDFPos], decreasing = TRUE),]
#what entries are above the 2.698S SD?
CarbSummary <- quantile(CarbDataFrame[CarbDFPos],na.rm = TRUE)
IQR <- CarbSummary[4]-CarbSummary[2]
UpperWisk <- CarbSummary[4]+1.5*IQR
#ok, what are the samples that are above that upper wisker
PosOutliers <- which(CarbDataFrame[CarbDFPos] > UpperWisk)
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#lets look at each potential outlier within the context of the the other examples of that variety.
while(counter < end){
#reporting out whats going on
print(paste("The ",colnames(CarbDataFrame[CarbDFPos])," content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],CarbDFPos],2),"%. The upper wisker is at ", round(UpperWisk,2),"%.",sep = ""))
if(is.na(CarbDataFrame[PosOutliers[counter],CarbDFPos]))
{
print(paste("The",colnames(CarbDataFrame[CarbDFPos]),"content of sample", CarbDataFrame$DFPosition[PosOutliers[counter]], "is NA. Skip this sample."))
}
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),]
#how much of an outlier is it?
outlierData <- grubbs.test(pull(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[[1]][i]),colnames(CarbDataFrame[CarbDFPos])]))
if(!is.na(outlierData$p.value ) && !is.na(pull(CarbDataFrame[PosOutliers[counter],CarbDFPos]))){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
#if the summation stat is also an outlierr, then add the sample to the to remove list. If the summation isn't an outlier, set the carb and summation carb to NA
#test summation carb (total poly or total sugar) by seeing if its greater than standard deviations from the mean
polySD <- sd(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
polymean <- mean(pull(outlierincontext[CarbSumPos]),na.rm = TRUE)
OutlierPoly <- pull(CarbDataFrame[PosOutliers[counter],CarbSumPos])
#Check if the carb's summation stat is also an outlier. (Total.Poly or Total.Sugar) It is more than 3 sd from the mean?
if((polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly) && !is.na(OutlierPoly)){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
# The total summationation stat is not an outlier
if((polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly) || is.na(OutlierPoly)){
ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Nulled"))
CarbDataFrame[PosOutliers[i],CarbDFPos]<- NA
CarbDataFrame[PosOutliers[i],CarbSumPos]<- NA
print(paste("It is an outlier among all",PosOutliersVar[[1]][i], "lines. It's ",colnames(outlierincontext[CarbSumPos])," content is not an outlier. The Sample will have its ",colnames(CarbDataFrame[CarbDFPos])," and ",colnames(outlierincontext[CarbSumPos])," set to NA."))
}
}
#if the outlier has a pvalue larger than the alpha, set the the carb to 0
if(outlierData$p.value > alpha){
# ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
# CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("It is not an outlier among all",PosOutliersVar[[1]][i], "lines.",colnames(CarbDataFrame[CarbDFPos])," has not been altered."))
}
}
if(is.na(outlierData$p.value)){
# ProbSamples <- recordKeeping(paste(colnames(CarbDataFrame[CarbDFPos]),"Zeroed"))
# CarbDataFrame[PosOutliers[i],CarbDFPos]<-0
print(paste("There are not enough",PosOutliersVar[[1]][i], "samples to determine if it is an outlier. ",colnames(CarbDataFrame[CarbDFPos])," has not been altered."))
}
i = i+1
counter = counter + 1
}
}
source("R/CarbOutlierCleanup.R")
#mash it all together
CarbInfoExpandedDF <- rbind(Su1s,Sh2s,Ots)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_wOutliers_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(CarbInfoExpandedDF[[i]],main = paste("Histogram of",colnames(CarbInfoExpandedDF[i])), xlab = colnames(CarbInfoExpandedDF[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_wOUtliers_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_wOutliers_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF,alpha = 0.05)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 6:12){
hist(CleanedInfo[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
CleanedInfo
summary(CleanedInfo)
CleanedInfo[,i]
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(CleanedInfo[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
pull(CleanedInfo[,i]
)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(pull(CleanedInfo[,i]),main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
colnames(CleanedInfo[i])
colnames(CleanedInfo[i])
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(pull(CleanedInfo[,i]),main = paste("Histogram of",colnames(CleanedInfo[i])), xlab = colnames(CleanedInfo[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_wOutliers_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(CarbInfoExpandedDF[[i]],main = paste("Histogram of",colnames(CarbInfoExpandedDF[i])), xlab = colnames(CarbInfoExpandedDF[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_wOUtliers_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type W/ Outliers") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_wOutliers_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type W/ Outliers") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF,alpha = 0.05)
par(mfrow=c(3,3))
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
for(i in 5:11){
hist(pull(CleanedInfo[,i]),main = paste("Histogram of",colnames(CleanedInfo[i])), xlab = colnames(CleanedInfo[i]))
}
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_wOutliers_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(CarbInfoExpandedDF[[i]],main = paste("Histogram of",colnames(CarbInfoExpandedDF[i])), xlab = colnames(CarbInfoExpandedDF[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_wOUtliers_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type W/ Outliers") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_wOutliers_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type W/ Outliers") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(pull(CleanedInfo[,i]),main = paste("Histogram of",colnames(CleanedInfo[i])), xlab = colnames(CleanedInfo[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 5:11){
hist(pull(CleanedInfo[,i]),main = paste("Histogram of",colnames(CleanedInfo[i])), xlab = colnames(CleanedInfo[i]))
}
dev.off()
return()
CarbDataFrameVis <- function(CarbDF, TitleQuality = ""){
source("R/CarbDataFrameVis.R")
CarbDataFrameVis(CleanedInfo,"Cleaned")
source("R/CarbDataFrameVis.R")
source("R/CarbDataFrameVis.R")
CarbDataFrameVis(CleanedInfo,"Cleaned")
CarbDF <- CleanedInfo
TitleQualtiy = "Cleaned"
VarietyPos <- which(colnames(CarbDataFrame) == "Variety")
SamplesPos <- which(colnames(CarbDataFrame) == "Samples")
StarchPos <- which(colnames(CarbDataFrame) == "Starch")
SugarPos <- which(colnames(CarbDataFrame) == "Total.Sugar")
VarietyPos <- which(colnames(CarbDF) == "Variety")
SamplesPos <- which(colnames(CarbDF) == "Samples")
StarchPos <- which(colnames(CarbDF) == "Starch")
SugarPos <- which(colnames(CarbDF) == "Total.Sugar")
#Visualize the Total Traits
png(paste("Figures/WSMDP_Carb_AllTrait_",TitleQuality,"_NIREqnOut_Histogram.png",sep=""))
TitleQuality <- "Cleaned"
#Visualize the Total Traits
png(paste("Figures/WSMDP_Carb_AllTrait_",TitleQuality,"_NIREqnOut_Histogram.png",sep=""))
par(mfrow=c(3,3))
for(i in StarchPos:SugarPos){
hist(pull(CarbDF[,i]),main = paste("Histogram of",colnames(CarbDF[i])), xlab = colnames(CarbDF[i]))
}
dev.off()
png(paste("Figures/WSMDP_AllNIRPred_",TitleQuality,"Starch_byEndo_Boxplot.png",sep=""), width = 750, height = 500)
dat.m <- melt(CarbDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = paste("Polysaccharide Content by Endosperm Type ",TitleQuality)) + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png(paste("Figures/WSMDP_AllNIRPred_",TitleQuality,"Sugar_byEndo_Boxplot.png",sep=""), width = 1000, height = 500)
dat.m <- melt(CarbDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = paste("Sugar Content by Endosperm Type",TitleQuality)) + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
source("R/CarbDataFrameVis.R")
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF,alpha = 0.05)
CarbDataFrameVis(CleanedInfo,"Cleaned")
source("R/CarbDataFrameVis.R")
source("R/CarbDataFrameVis.R")
CarbDataFrameVis(CleanedInfo,"Cleaned")
source("R/CarbDataFrameVis.R")
CarbDataFrameVis(CleanedInfo,"Cleaned")
CarbDataFrameVis(CarbInfoExpandedDF,"With_Outliers")
CarbDataFrameVis(CarbInfoExpandedDF,"WithOutliers")
CarbDataFrameVis(CleanedInfo,"Cleaned")
CarbDataFrameVis(CarbInfoExpandedDF,"WithOutliers")
CarbDataFrameVis(CleanedInfo,"Cleaned")
