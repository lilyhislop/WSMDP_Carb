getwd()
SampleInfo <- read.csv("/0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/Plot_line_spatial_2014.csv")
SampleInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/Plot_line_spatial_2014.csv")
SampleInfo
library(ggplot2)#for making pretty graph
head(SampleInfo)
ggplot(SampleInfo,aes(row,column,color=Line))+geom_point(size=4)+theme_classic()
ggplot(SampleInfo,aes(row,column,color=Line))+geom_point(size=4)+theme_classic()
ggplot(SampleInfo,aes(row,column,color=Line))+geom_point(size=4) + theme(legend. title = element_blank())
ggplot(SampleInfo,aes(row,column,color=Line))+geom_point(size=4) + theme(legend, title = element_blank())
p <- ggplot(SampleInfo,aes(row,column,color=Line))+geom_point(size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=rep))+geom_point(size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=block))+geom_point(size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(size=4)
p + theme(legend.position = "none")
install.packages("wesanderson")
library(wesanderson)
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(size=4) +scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(size=4) +scale_color_manual(values=wes_palette(n=3, name="Royal1"))
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(size=4)
p + theme(legend.position = "none")
SampleInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/Plot_line_spatial_2014.csv")
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(aes(colour = factor(superblock), size=4)
)
p <- ggplot(SampleInfo,aes(row,column,color=superblock))+geom_point(aes(colour = factor(superblock)), size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(superblock)), size=4)
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(block)), size=4)
p + theme(legend.position = "none")
library(ggplot2)#for making pretty graph
install.packages("wesanderson")
library(wesanderson)
SampleInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/Plot_line_spatial_2014.csv")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(block)), size=4)
p + theme(legend.position = "none")
SampleInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/Plot_line_spatial_2014.csv")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(set)), size=4)
p + theme(legend.position = "none")
SampleInfo
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(superblock)), size=4)
p + theme(legend.position = "none")
p + theme(legend.position = "none")+title("Colored by Superblock")
n
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(superblock)), size=4)
p + theme(legend.position = "none")+title("Colored by Superblock")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(superblock)), size=4) +title("Colored by Superblock")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(superblock)), size=4) + ggtitle("Colored by Superblock")
p + theme(legend.position = "none")
p <- ggplot(SampleInfo,aes(row,column))+geom_point(aes(colour = factor(block)), size=4) + ggtitle("Colored by Incomplete Block")
p + theme(legend.position = "none")
CondensedInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/20142015_WSMDP_PlantingInfo_Condensation.csv")
MattWiInfo <- read.csv("0 Grad School/0 Lab/Diversity Panel/Diversity Panel Spread Sheets/20142015PlantingInfo/wisc_2014rep2.csv")
head(CondensedInfo)
head(MattWiInfo)
which(CondensedInfo$superblock == 1)
Group1Inbreds <- CondensedInfo$Inbreds[which(CondensedInfo$superblock == 1)]
Group1Inbreds <- CondensedInfo$Inbreds[which(CondensedInfo$superblock == 1),]
Group1Inbreds <- CondensedInfo$Inbreds[,which(CondensedInfo$superblock == 1)]
Group1Inbreds
which(CondensedInfo$superblock == 1)
CondensedInfo$Inbreds[which(CondensedInfo$superblock == 1)]
CondensedInfo$Inbreds
Group1Inbreds <- CondensedInfo$Inbred[which(CondensedInfo$superblock == 1)]
Group1Inbreds <- CondensedInfo$Inbred[which(CondensedInfo$superblock == 2)]
Group1Inbreds <- CondensedInfo$Inbred[which(CondensedInfo$superblock == 1)]
Group2Inbreds <- CondensedInfo$Inbred[which(CondensedInfo$superblock == 2)]
Group3Inbreds <- CondensedInfo$Inbred[which(CondensedInfo$superblock == 3)]
Group1Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 1)])
Group2Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 2)])
Group3Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 3)])
head(MattWiInfo)
NYGp1Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 1)])
NYGp2Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 2)])
NYGp3Inbreds <- unique(CondensedInfo$Inbred[which(CondensedInfo$superblock == 3)])
MatGp1Inbreds <- unique(MattWiInfo$pedigree[which(MattWiInfo$super == 1)])
MatGp2Inbreds <- unique(MattWiInfo$pedigree[which(MattWiInfo$super == 2)])
MatGp3Inbreds <- unique(MattWiInfo$pedigree[which(MattWiInfo$super == 3)])
?union
setequal(NYGp1Inbreds, MatGp1Inbreds)
setdiff(NYGp1Inbreds, MatGp1Inbreds)
setdiff(MatGp1Inbreds,NYGp1Inbreds)
?distinct
Sup1Dif <- setdiff(MatGp1Inbreds,NYGp1Inbreds)
Sup2Dif <- setdiff(MatGp2Inbreds,NYGp2Inbreds)
Sup3Dif <- setdiff(MatGp2Inbreds,NYGp2Inbreds)
Sup2Dif
Sup3Dif
Sup1Dif <- setdiff(MatGp1Inbreds,NYGp1Inbreds)
Sup2Dif <- setdiff(MatGp2Inbreds,NYGp2Inbreds)
Sup3Dif <- setdiff(MatGp3Inbreds,NYGp3Inbreds)
Sup1Dif
Sup2Dif
Sup3Dif
which(CondensedInfo$Inbred == Sup1Dif)
which(CondensedInfo$Inbred == Sup1Dif[1])
CondensedInfo$Inbred[Sup1Dif]
CondensedInfo$Inbred[,Sup1Dif]
Sup1Dif
CondensedInfo[which(CondensedInfo$Inbred==Sup1Dif[1])]
CondensedInfo[,which(CondensedInfo$Inbred==Sup1Dif[1])]
which(CondensedInfo$Inbred==Sup1Dif[1])
CondensedInfo[which(CondensedInfo$Inbred==Sup1Dif[1]),]
CondensedInfo[which(CondensedInfo$Inbred==Sup1Dif[2]),]
CondensedInfo[which(CondensedInfo$Inbred==Sup1Dif[3]),]
CondensedInfo[which(CondensedInfo$Inbred==Sup1Dif[4]),]
#########################
#This code was written by Lillian Hislop
#2021.06.23
#WSMDP Carbohydrate Analysis
#GWAS Degbugging
#########################
library("devtools")
install_github("jendelman/GWASpoly")
library(GWASpoly)#for running Gwas
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#From GWASPolyRunner Function
filename <- "SeqB"
adendum <- "WFBLUP"
trait <- "Starch.BLUP"
#No Fixed effect
GWASPolyRunVersion <- "NoFixedEffect_FDRThresh_2021-06-23"
fixedeffect <- NULL
fixedType <- NULL
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
setKOut <- set.K(readGPOut, LOCO=TRUE)
paramsOut <- set.params(fixed=fixedeffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models=c"general",traits=trait, params=paramsOut)
# THIS IS WHERE THE PROBLEM IS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models="general",traits=trait, params=paramsOut)
# #With EndoMutant as Fixed Effect
GWASPolyRunVersion <- "EndoFixedEffect_FDRThresh_2021-06-23"
fixedEffect <- c("endo")
fixedType <- c("factor")
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
setKOut <- set.K(readGPOut, LOCO=TRUE)
paramsOut <- set.params(fixed=fixedeffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
fixedeffect
fixedEffect <- c("endo")
fixedType <- c("factor")
paramsOut <- set.params(fixed=fixedEffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS IF USING FIXED EFFECTS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models="general",traits=trait, params=paramsOut)
readGPOut
str(readGPOut)
paramsOut <- set.params(fixed=NULL, fixed.type=NULL, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS IF USING FIXED EFFECTS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models="general",traits=trait, params=paramsOut)
paramsOut <- set.params(fixed=fixedEffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS IF USING FIXED EFFECTS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models="general",traits=trait, params=paramsOut)
#read in genetic info post MAF
hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
SCMV_geno <- fread(hmppath,skip = "rs#")
library(dplyr)
library(lme4)
library(ggplot2)#for making pretty graphs
library(ggpmisc)
library(grDevices)
library(tidyr) #for separate
library(stringr)#str_remove
library(psych)
library(reshape2)#for multiple groups in GGplot
library(outliers)
library(lattice)
library(PopGenome)
library(data.table) #for fread
# BiocManager::install("VariantAnnotation")
library("VariantAnnotation")
library("snpStats")
#read in genetic info post MAF
hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
SCMV_geno <- fread(hmppath,skip = "rs#")
geno_scmv <- SCMV_geno
#From GWASPolyRunner Function
filename <- "SeqB"
adendum <- "WFBLUP"
trait <- "Starch.BLUP"
# #With EndoMutant as Fixed Effect
GWASPolyRunVersion <- "EndoFixedEffect_FDRThresh_2021-06-23"
fixedEffect <- c("endo")
fixedType <- c("factor")
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
setKOut <- set.K(readGPOut, LOCO=TRUE)
paramsOut <- set.params(fixed=fixedEffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS IF USING FIXED EFFECTS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models="general",traits=trait, params=paramsOut)
