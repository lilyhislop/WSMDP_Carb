########mash it all together ######
#All the predictions with the field lines
CarbInfoExpandedWFDF <- rbind(HWSPs,LWSPWFs)
#all the predictions without the field lines
CarbInfoExpandedNFDF <- rbind(HWSPs,LWSPNFs)
#add in a year/location environment factor
CarbInfoExpandedWFDF$Envi <- paste(CarbInfoExpandedWFDF$Year,CarbInfoExpandedWFDF$Location)
CarbInfoExpandedNFDF$Envi <- paste(CarbInfoExpandedNFDF$Year,CarbInfoExpandedNFDF$Location)
#visualize these data sets pre cleaning
CarbDataFrameVis(CarbInfoExpandedWFDF,"WithField_WithOutliers")
CarbDataFrameVis(CarbInfoExpandedNFDF,"NoField_WithOutliers")
#clean up the predictive data frames. Reassign or delete outliers
CleanedInfoWF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedWFDF,"WF",alpha = 0.05)
CleanedInfoNF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedNFDF,"NF",alpha = 0.05)
CleanedInfoWF <- subset(CleanedInfoWF_wexcess, !is.na(IsExperimental))
CleanedInfoNF <- subset(CleanedInfoNF_wexcess, !is.na(IsExperimental))
write.csv(file = "Data/OutputtedData/CleanedInfoWFOutput.csv",CleanedInfoWF)
write.csv(file = "Data/OutputtedData/CleanedInfoNFOutput.csv",CleanedInfoNF)
#revisualize the dataframes
CarbDataFrameVis(CleanedInfoWF,"WithField_Cleaned")
CarbDataFrameVis(CleanedInfoNF,"NoField_Cleaned")
#write the names of the varieties used to a csv file so we can find the corresponding GBS data
write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataNF.csv",unique(CleanedInfoNF[c("Variety", "endo")]))
write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataWF.csv",unique(CleanedInfoWF[c("Variety", "endo")]))
#########################
###Validate that the NIR Equation is good###
#########################
#######Equation Validation!##############
#Now I have a variable that has all the projected values, for the values used to calibrate the equations. WHat are the statistics on that?
#set carb to a number 1:7. carb <- c(Fructose, Glucose, Sucrose, Total Sugar, Starch, Total Polysaccharide, WSP)
#this functions needs to have the data frame set up so the carbs being compared are directly next to eachother
EqnStats <- function(DF){
#establish dataframe used to record stats
Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
RMSEP = rep(NA,7),
bias = rep(NA,7),
SEE = rep(NA,7),
slope = rep(NA,7),
intercept = rep(NA,7),
R2 = rep(NA,7))
dfpos <- c(2,4,6,8,10,12,14)
for(carb in 1:7){
#Calculated the RMSEP
Out$RMSEP[carb] <- sqrt(sum((DF[,dfpos[carb]]- DF[,dfpos[carb]-1])^2, na.rm = TRUE)/dim(DF)[1])
#Calculate the Bias
Out$bias[carb] <- mean(DF[,dfpos[carb]], na.rm = TRUE) - mean(DF[,dfpos[carb]-1],na.rm = TRUE)
#Calculated the SEE
Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
Out$Carb[carb] <- colnames(DF[dfpos[carb]])
}
return(Out)
}
#Visualize these
R2Vis <- function(DF, label, Out){
dfpos <- c(2,4,6,8,10,12,14)
Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP")
for(i in 1:7){
carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
carbFileName <- paste("Figures/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
png(carbFileName)
par(mfrow=c(1,1))
print(summary(carbCompare))
rsqua <- summary(carbCompare)$r.squared
plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3,sep = ""))
abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
# text(15,max(Prediction[,i])-5,labels = paste("r^2 =",trunc(rsqua*10^3)/10^3))
Out$slope[i] <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
Out$intercept[i] <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
Out$R2[i] <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
dev.off()
}
return(Out)
}
######Visualize the validation. Look at all the samples that were wetlabbed and used to calibrate the equation
wetlab <- read.csv("Data/WSMDP_Wetlab_StarchSugarData_FormatedForWinISI_WithR.csv")
wetlabDF <- wetlab[,c(1,6:8,3,2,4,5)]
WLLabels <- c("Samples","Starch_WL","Total.Polysaccharides_WL", "WSP_WL","Glucose_WL","Fructose_WL","Sucrose_WL","Total.Sugar_WL")
colnames(wetlabDF) <- WLLabels
WFWL <- merge(CleanedInfoWF, wetlabDF, by = "Samples")
NFWL <- merge(CleanedInfoNF, wetlabDF, by = "Samples")
alternatingorder <- c(1,5,28,6,29,7,30,8,31,9,32,10,33,11,34)
WFWLdf <- WFWL[,alternatingorder]
NFWLdf <- NFWL[,alternatingorder]
WFWLdfEqnStatsR <- R2Vis(WFWLdf[,2:15], "CleanedWSPeqnWF_PredVsWetlab_for_Calibration_Samples", EqnStats(WFWLdf[,2:15]))
NFWLdfEqnStatsR <- R2Vis(NFWLdf[,2:15], "CleanedWSPeqnNF_PredVsWetlab_for_Calibration_Samples", EqnStats(NFWLdf[,2:15]))
write.csv(WFWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsAllWetlabWF.csv")
write.csv(NFWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsAllWetlabNF.csv")
######Visualize the validation. Only the samples that were NOT used to create the equation
valwetlab <- read.csv("Data/WSMDP_EqnValidation_Wetlab_Data.csv")
valwetlabDF <- valwetlab[-2]
colnames(valwetlabDF)[1] <- "Samples"
WFValWL <- merge(CleanedInfoWF, valwetlabDF, by = "Samples")
NFValWL <- merge(CleanedInfoNF, valwetlabDF, by = "Samples")
WFValWLdf <- WFValWL[,alternatingorder]
NFValWLdf <- NFValWL[,alternatingorder]
WFValWLdfEqnStatsR <- R2Vis(WFValWLdf[,2:15], "CleanedWSPeqnWF_PredVsWetlab_ValidationSubset", EqnStats(WFValWLdf[,2:15]))
NFValWLdfEqnStatsR <- R2Vis(NFValWLdf[,2:15], "CleanedWSPeqnNF_PredVsWetlab_ValidationSubset", EqnStats(NFValWLdf[,2:15]))
write.csv(WFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF.csv")
write.csv(NFValWLdfEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF.csv")
####With Jared WetlabDATA
HWSPsJ <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | is.na(HWSPsDF$endo)),]
alternatingorder2 <- c(1,5,26,6,27,7,28,8,29,9,30,10,31,11,32)
CarbInfoExpandedWFJDF <- rbind(HWSPsJ,LWSPWFs)
CarbInfoExpandedNFJDF <- rbind(HWSPsJ,LWSPNFs)
WFValWLJ <- merge(CarbInfoExpandedWFJDF, valwetlabDF, by = "Samples")
NFValWLJ <- merge(CarbInfoExpandedNFJDF, valwetlabDF, by = "Samples")
WFValWLJdf <- WFValWLJ[,alternatingorder2]
NFValWLJdf <- NFValWLJ[,alternatingorder2]
WFValWLdfJEqnStatsR <- R2Vis(WFValWLJdf[,2:15], "UnCleanedWSPeqnWF_PredVsWetlab_ValidationSubset_WJared", EqnStats(WFValWLdf[,2:15]))
NFValWLdfJEqnStatsR <- R2Vis(NFValWLJdf[,2:15], "UnCleanedWSPeqnNF_PredVsWetlab_ValidationSubset_WJared", EqnStats(NFValWLdf[,2:15]))
write.csv(WFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationWF_WJared.csv")
write.csv(NFValWLdfJEqnStatsR, "Data/OutputtedData/EqnFitStatisticsValidationNF_WJared.csv")
#########################
###Linear Model Analysis###
#########################
linearmodel <- function(SampleDFtoModel,TitleAddendum){
SampleDFtoModel$superblock <- as.factor(SampleDFtoModel$superblock)
SampleDFtoModel$Col <- as.factor(SampleDFtoModel$Col)
SampleDFtoModel$Row <- as.factor(SampleDFtoModel$Row)
SampleDFtoModel$Year <- as.factor(SampleDFtoModel$Year)
SampleDFtoModel$Envi <- as.factor(SampleDFtoModel$Envi)
SampleDFtoModel$Check <- as.factor(SampleDFtoModel$Check)
SampleDFtoModel$block <- as.factor(SampleDFtoModel$block)
SampleDFtoModel$Rep <- as.factor(SampleDFtoModel$Rep)
SampleDFtoModel$endo <- as.factor(SampleDFtoModel$endo)
SampleDFtoModel$PlotNum <- as.factor(SampleDFtoModel$PlotNum)
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
blupHolder <- data.frame("Variety" = sort(unique(SampleDFtoModel$BookInbred)))
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
carbs <- colnames(SampleDFtoModel)[c1:c2]
for(j in 1:length(carbs)){
#output the statistics about this trait
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
model <- lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(model@optinfo$optimizer=="nloptwrap")) {
model <- update(model, control=strict_tol)
}
RandomEffects <- ranef(model)
tempBlup <- data.frame("Variety" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Variety", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
# CheckAssumptions
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
# Calculate hertiability
model_variances <- as.data.frame(VarCorr(model))
h2 <- model_variances$vcov[2]/(model_variances$vcov[2]+(model_variances$vcov[1]/5)+(model_variances$vcov[9]/10))
out <- capture.output(h2)
cat(out, file= statsfile, sep="\n", append=TRUE)
#Compare model with one with Endosperm
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
modelendo <- lmer(modelpasteendo,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(modelendo@optinfo$optimizer=="nloptwrap")) {
modelendo <- update(modelendo, control=strict_tol)
}
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
}
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
return(blupHolder)
}
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
#########################
###Genomic Info###
#########################
genoinfo <- read.csv("Data/WSMDP_Inbreds.txt",head = FALSE)
colnames(genoinfo) <- c("Variety","","","","","","","GenoName","source","endo","notes","Region","Program")
#read in genetic info post MAF
hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
SCMV_geno <- fread(hmppath,skip = "rs#")
geno_scmv <- SCMV_geno
str(geno_scmv)
colnames(geno_scmv)<-gsub(colnames(geno_scmv), pattern = ":.*", replacement = "")
str(geno_scmv)
WFBlupsGeno <- merge(WFBlups,genoinfo, by = "Variety")
c1 <- which(colnames(WFBlupsGeno)=="Starch.BLUP")
c2 <- which(colnames(WFBlupsGeno)=="Total.Sugar.BLUP")
c3 <- which(colnames(WFBlupsGeno)=="GenoName")
c4 <- which(colnames(WFBlupsGeno)=="endo")
#remove rows with no geno information and remove rows that are duplicates.
#TODO:Check which duplicates are being deleted and if its a good choice
WFBlupsGeno <- WFBlupsGeno[-which(WFBlupsGeno$GenoName == ""),]
WFBlupsGeno <- WFBlupsGeno %>% distinct(GenoName, .keep_all = TRUE)
#seperate out superflous information
WFBlupsGenoJustPheno <- WFBlupsGeno[,c(c3,c1:c2,c4)]
WFBlupsGenoJustPheno$endo <- as.factor(WFBlupsGenoJustPheno$endo)
blups <- colnames(WFBlupsGeno[c1:c2])
for(blup in blups){
GWASPolyRunner(WFBlupsGenoJustPheno[,1:8],geno_scmv,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),"SeqB","WFBLUP")
GWASPolyRunner(WFBlupsGenoJustPheno,geno_scmv,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),"SeqB","WFBLUP","endo","factor")
}
WFBlupsGenoJustPheno
#From GWASPolyRunner Function
#No Fixed effect
GWASPolyRunVersion <- paste0("NoFixedEffect_FDRThresh_",Sys.Date())
GWASPolyRunVersion
outfiles[1] <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
adendum <- "WFBLUP"
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#From GWASPolyRunner Function
filename <- "SeqB"
adendum <- "WFBLUP"
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
outfiles2
outfiles1
#now we run the GWASpoly with the files in the proper format
data <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
data2 <- set.K(data, LOCO=TRUE)
params <- set.params(fixed=fixedeffect, fixed.type=fixedType,n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
fixedeffect <- NULL
fixedType <- NULL
params <- set.params(fixed=fixedeffect, fixed.type=fixedType,n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
blup
trait <- "Starch.BLUP"
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
#From GWASPOLYVis
visfileprefix <- paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",filename,"_",adendum,"_",GWASPolyRunVersion,"_",trait)
QQplotfile <- paste(visfileprefix,"_QQplot_General.png", sep = "")
png(QQplotfile)
#,"1-dom-alt-alt","1-dom-alt-ref","1-dom-ref-alt","1-dom-ref-ref")
qq.plot(data3,trait=trait,model="general")
dev.off()
data4 <- set.threshold(data3,method="FDR",level=0.05)
#Here's the QTLS found
print(get.QTL(data4))
MANGenplotfile <- paste(visfileprefix,"_Manhattan_GeneralModel.png", sep = "")
png(MANGenplotfile,width = 750, height = 500)
print({
par(mfrow=c(1,1))
manhattan.plot(data4,trait=trait,model="general")
# abline(a = get.QTL(data4, model="general")$Threshold[1], b = 0, lty = "dashed")
})
dev.off()
Scoresfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_scores.csv", sep = "")
Effectfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_effects.csv", sep = "")
write.GWASpoly(data4, trait, filename=Scoresfile, what = "scores", delim = ",")
write.GWASpoly(data4, trait, filename=Effectfile, what = "effects", delim = ",")
QTLfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_QTLs.csv", sep = "")
write.table(get.QTL(data4),
append = FALSE,
file = QTLfile,
sep = ",",
dec = ".",
row.names = FALSE,
col.names = TRUE)
#With Fixed Effect
GWASPolyRunVersion <- paste0("EndoFixedEffect_FDRThresh_",Sys.Date())
fixedeffect <- "endo"
fixedType <- "factor"
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
data <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
data2 <- set.K(data, LOCO=TRUE)
#With Fixed Effect
GWASPolyRunVersion <- paste0("EndoFixedEffect_FDRThresh_",Sys.Date())
GWASPolyRunVersion
GWASPolyRunVersion <- paste0("NoFixedEffect_FDRThresh_",Sys.Date())
GWASPolyRunVersion
#With Fixed Effect
GWASPolyRunVersion <- "EndoFixedEffect_FDRThresh_2021-06-23
fixedEffect <- "endo"
fixedType <- "factor"
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
data <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
data2 <- set.K(data, LOCO=TRUE)
params <- set.params(fixed=fixedeffect, fixed.type=fixedType,n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
#From GWASPOLYVis
visfileprefix <- paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",filename,"_",adendum,"_",GWASPolyRunVersion,"_",trait)
QQplotfile <- paste(visfileprefix,"_QQplot_General.png", sep = "")
png(QQplotfile)
#,"1-dom-alt-alt","1-dom-alt-ref","1-dom-ref-alt","1-dom-ref-ref")
qq.plot(data3,trait=trait,model="general")
dev.off()
data4 <- set.threshold(data3,method="FDR",level=0.05)
#Here's the QTLS found
print(get.QTL(data4))
MANGenplotfile <- paste(visfileprefix,"_Manhattan_GeneralModel.png", sep = "")
png(MANGenplotfile,width = 750, height = 500)
print({
par(mfrow=c(1,1))
manhattan.plot(data4,trait=trait,model="general")
# abline(a = get.QTL(data4, model="general")$Threshold[1], b = 0, lty = "dashed")
})
dev.off()
#
# MANAddplotfile <- paste(visfileprefix,"_Manhattan_AdditiveModel.png", sep = "")
# png(MANAddplotfile,width = 750, height = 500)
# print({
# par(mfrow=c(1,1))
# manhattan.plot(data4,trait=trait,model="additive")
# })
# dev.off()
Scoresfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_scores.csv", sep = "")
Effectfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_effects.csv", sep = "")
write.GWASpoly(data4, trait, filename=Scoresfile, what = "scores", delim = ",")
write.GWASpoly(data4, trait, filename=Effectfile, what = "effects", delim = ",")
QTLfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_QTLs.csv", sep = "")
write.table(get.QTL(data4),
append = FALSE,
file = QTLfile,
sep = ",",
dec = ".",
row.names = FALSE,
col.names = TRUE)
#With Fixed Effect
GWASPolyRunVersion <- "EndoFixedEffect_FDRThresh_2021-06-23
fixedEffect <- "endo"
fixedType <- "factor"
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
data <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
data2 <- set.K(data, LOCO=TRUE)
params <- set.params(fixed=fixedeffect, fixed.type=fixedType,n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
#From GWASPOLYVis
visfileprefix <- paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",filename,"_",adendum,"_",GWASPolyRunVersion,"_",trait)
QQplotfile <- paste(visfileprefix,"_QQplot_General.png", sep = "")
png(QQplotfile)
#,"1-dom-alt-alt","1-dom-alt-ref","1-dom-ref-alt","1-dom-ref-ref")
qq.plot(data3,trait=trait,model="general")
dev.off()
data4 <- set.threshold(data3,method="FDR",level=0.05)
#Here's the QTLS found
print(get.QTL(data4))
MANGenplotfile <- paste(visfileprefix,"_Manhattan_GeneralModel.png", sep = "")
png(MANGenplotfile,width = 750, height = 500)
print({
par(mfrow=c(1,1))
manhattan.plot(data4,trait=trait,model="general")
# abline(a = get.QTL(data4, model="general")$Threshold[1], b = 0, lty = "dashed")
})
dev.off()
#
# MANAddplotfile <- paste(visfileprefix,"_Manhattan_AdditiveModel.png", sep = "")
# png(MANAddplotfile,width = 750, height = 500)
# print({
# par(mfrow=c(1,1))
# manhattan.plot(data4,trait=trait,model="additive")
# })
# dev.off()
Scoresfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_scores.csv", sep = "")
Effectfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_effects.csv", sep = "")
write.GWASpoly(data4, trait, filename=Scoresfile, what = "scores", delim = ",")
write.GWASpoly(data4, trait, filename=Effectfile, what = "effects", delim = ",")
QTLfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_QTLs.csv", sep = "")
write.table(get.QTL(data4),
append = FALSE,
file = QTLfile,
sep = ",",
dec = ".",
row.names = FALSE,
col.names = TRUE)
#With Fixed Effect
GWASPolyRunVersion <- "EndoFixedEffect_FDRThresh_2021-06-23"
fixedEffect <- "endo"
fixedType <- "factor"
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
data <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
data2 <- set.K(data, LOCO=TRUE)
params <- set.params(fixed=fixedeffect, fixed.type=fixedType,n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
fixedEffect <- c("endo")
fixedType <- c("factor")
params <- set.params(fixed=fixedeffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
data
data3 <- GWASpoly(data2,models="general",traits=trait, params=params)
# THIS IS WHERE THE PROBLEM IS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
data3 <- GWASpoly(data2,models=c("general"),traits=trait, params=params)
# THIS IS WHERE THE PROBLEM IS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
data3 <- GWASpoly(data2,models=c("general", "additive"),traits=trait, params=params)
#From GWASPolyRunner Function
filename <- "SeqB"
adendum <- "WFBLUP"
trait <- "Starch.BLUP"
#No Fixed effect
GWASPolyRunVersion <- "NoFixedEffect_FDRThresh_2021-06-23"
fixedeffect <- NULL
fixedType <- NULL
outfiles1 <- paste("Data/WSMDP_Carb_GWASpoly_FullPheno_",GWASPolyRunVersion ,".csv",sep = "")
outfiles2 <- paste("Data/RawData/",filename,adendum,"_",GWASPolyRunVersion,"_numericFormat.csv",sep = "")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
#now we run the GWASpoly with the files in the proper format
readGPOut <- read.GWASpoly(ploidy=2,
pheno.file = outfiles1,
geno.file=outfiles2,
format="numeric",
n.traits=7,
delim=",")
setKOut <- set.K(readGPOut, LOCO=TRUE)
paramsOut <- set.params(fixed=fixedeffect, fixed.type=fixedType, n.PC = 3, MAF = 0.005) #no fixed effects, MAF should do nothing as it's already been filtered
# THIS IS WHERE THE PROBLEM IS. Error: Error in cbind(X, model.matrix(~x, data.frame(x = xx))[, -1]) :
#   number of rows of matrices must match (see arg 2)
GPOut <- GWASpoly(setKOut,models=c("general", "additive"),traits=trait, params=paramsOut)
#From GWASPolyVis
visfileprefix <- paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",filename,"_",adendum,"_",GWASPolyRunVersion,"_",trait)
QQplotfile <- paste(visfileprefix,"_QQplot_General.png", sep = "")
png(QQplotfile)
#,"1-dom-alt-alt","1-dom-alt-ref","1-dom-ref-alt","1-dom-ref-ref")
qq.plot(GPOut,trait=trait,model="general")
dev.off()
threshOut <- set.threshold(GPOut,method="FDR",level=0.05)
#Here's the QTLS found
print(get.QTL(threshOut))
MANGenplotfile <- paste(visfileprefix,"_Manhattan_GeneralModel.png", sep = "")
png(MANGenplotfile,width = 750, height = 500)
print({
par(mfrow=c(1,1))
manhattan.plot(threshOut,trait=trait,model="general")
# abline(a = get.QTL(threshOut, model="general")$Threshold[1], b = 0, lty = "dashed")
})
dev.off()
Scoresfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_scores.csv", sep = "")
Effectfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_effects.csv", sep = "")
write.GWASpoly(threshOut, trait, filename=Scoresfile, what = "scores", delim = ",")
write.GWASpoly(threshOut, trait, filename=Effectfile, what = "effects", delim = ",")
QTLfile <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",filename,adendum,GWASPolyRunVersion,"_",trait,"_QTLs.csv", sep = "")
write.table(get.QTL(threshOut),
append = FALSE,
file = QTLfile,
sep = ",",
dec = ".",
row.names = FALSE,
col.names = TRUE)
#########################
#This code was written by Lillian Hislop
#2021.06.23
#WSMDP Carbohydrate Analysis
#GWAS Degbugging
#########################
library("devtools")
install_github("jendelman/GWASpoly")
