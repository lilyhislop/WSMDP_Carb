c1 <- which(colnames(NFBlupsGenoJustPheno)=="Total.Polysaccharides.BLUP")
c2 <- which(colnames(NFBlupsGenoJustPheno)=="WSP.BLUP")
c1 <- which(colnames(NFBlupsGenoJustPheno)=="Starch.BLUP")
# c1 <- which(colnames(WFBlupsGenoJustPheno)=="Glucose.BLUP")
c2 <- which(colnames(NFBlupsGenoJustPheno)=="Total.Sugar.BLUP")
blups <- colnames(NFBlupsGenoJustPheno[c1:c2])
# Start the clock!
ptm <- proc.time()
for(blup in blups){
# GWASPolyRunner(WFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_",Sys.Date()),Seq,"WFBLUP")
# GWASPolyRunner(WFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_",Sys.Date()),Seq,"WFBLUP","endo","factor")
GWASPolyRunner(NFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"NFBLUP")
# GWASPolyRunner(NFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"NFBLUP","endo","factor")
#
#   GWASPolyRunner(HWSPBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"WFBLUP")
#   GWASPolyRunner(HWSPBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"WFBLUP","endo","factor")
#
#   GWASPolyRunner(LWSPNFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPNFBlups")
#   GWASPolyRunner(LWSPNFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPNFBlups","endo","factor")
#
#   GWASPolyRunner(LWSPWFBlupsGenoJustPheno[,1:8],geno,blup,paste0("NoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPWFBlups")
#   GWASPolyRunner(LWSPWFBlupsGenoJustPheno,geno,blup,paste0("EndoFixedEffect_FDRThresh_",Sys.Date()),Seq,"LWSPWFBlups","endo","factor")
}
beep(2)
proc.time() - ptm
FullGWASVisualize <- function(GWASPolyRunVersion){
DataSet <- "NFBLUP"
Thresh = "FDR"
#establish DF to hold the file readins
QTLList <- list()
#Put these files into a dataframe
#This is the originally created filename
for(i in 1:7){
file <- paste("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_",Seq,DataSet,GWASPolyRunVersion,"_",blups[i],"_",Thresh,"_SignificantQTL.csv", sep = "")
if (file.size(file) > 100){
QTLList[[i]] <- read.csv(file)}}
# for(trait in blups){QTLDF[[i]] <- read.table(paste0("Data/OutputtedData/GWASpoly/WSMDP_Carb_GWASpoly_SeqGNFBLUPEndoFixedEffect_FDRThresh_2021-08-19_",trait,"_FDR_QTLs.csv"))}
QTLDF <- bind_rows(QTLList)
QTLDFGen <- QTLDF[which(QTLDF$Model == "general"),]
genoPosInfo <- geno[,3:4]
# genoPosInfo <- QTLDFGen[,5:6]
chrMax <- vector()
for(chr in 1:10){
chrMax[chr] <- max(genoPosInfo$pos[which(genoPosInfo == chr)])}
#### B ####
# ## Loading in the data
# SNP <- read.csv("significant_snp_locations_v2.csv", header=T, stringsAsFactors=F)
# str(SNP)
# #SNP <- SNP[c(-1:-2),]
# make chromosome and end1 as numeric, trait as factor
QTLDFGen$chr <- as.factor(QTLDFGen$Chrom)
QTLDFGen$pos <- as.numeric(QTLDFGen$Position)
QTLDFGen$Trait <- as.factor(paste0(QTLDFGen$Trait," (",QTLDFGen$Threshold, " LOD)"))
# QTLDFGen$Trait <- factor(QTLDFGen$Trait, levels = c("Protein As Is", "Ankom Crude Fiber", "Ash As Is", "Fat As Is",
#                                           "Fiber As Is", "Fructose", "Sucrose", "Starch As Is", "Crude Fiber",
#                                           "N Combustion", "Ash", "N Kjeltec"))
#create a new table of maize chromosome length and make it a data frame
maize_chromosomes <- cbind(chromosome = c(1:10), start = c(rep(0,10)), end = c(chrMax))
maize_chromosomes <- data.frame(maize_chromosomes)
str(maize_chromosomes)
png(paste0("Figures/GWASpoly/WSMDP_Carb_GWASpoly_",GWASPolyRunVersion,"_",DataSet,"_AllQTLPosition_GeneralModel.png"),width = 750,height =750)
ggplot(QTLDFGen, aes(as.integer(Chrom), Position)) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "black", size = 16, inherit.aes = FALSE) +
geom_segment(data = maize_chromosomes, aes(x = chromosome, xend = chromosome, y = start, yend = end), lineend = "round", color = "white", size = 15, inherit.aes = FALSE) +
scale_y_reverse(breaks = seq(3.5e8, 0, -50e6), labels = c(350, seq(300, 0, -50)), limits = c(3.5e8, 0)) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10)) +
ylab("Genomic positions (Mb)") + xlab ("Chromosome") +
theme_classic() +
theme(axis.text.x = element_text(size=12), axis.title.x = element_text(size= 12), axis.text.y = element_text(size=11), axis.title.y = element_text(size=12)) +
theme(legend.text = element_text(size=12), legend.title = element_text(size=12)) +
geom_point(aes(color= Trait), position = position_dodge(width = 0.4), size = 3, alpha = 1) +
scale_color_brewer(palette = "Paired") +
theme(legend.title = element_blank(), legend.position = c(0.55,0.15), legend.direction = "horizontal", legend.text=element_text(size=12)) +
scale_color_manual(values = c("#d55e00",  "#cc79a7", "#0072b2", "#f0e442", "#009e73", "#000000", "#924900"))
dev.off()
}
FullGWASVisualize("EndoFixedEffect_FDRThresh_2021-09-09")
FullGWASVisualize("NoFixedEffect_FDRThresh_2021-09-09")
FullGWASVisualize("NoFixedEffect_FDRThresh_2021-09-10")
#establish a file to put the results in
EndoCompareFile <- paste0("Data/OutputtedData/WSMDP_CarbBLUPComparedbyEndo_NFBlup.txt")
#iterate through all the traits
for(blup in blups){
#paste in a header
cat(paste0("Compare the ",blup," by endosperm mutant groups."), file=EndoCompareFile, sep="\n", append=TRUE)
EndoCompare<-aov(NFBlupsGenoJustPheno[,blup]~NFBlupsGenoJustPheno$endo)
# EndoCompare<-aov(CleanedInfoNF$Starch~CleanedInfoNF$endo)
#none of these residuals are normal. I don't know what. UUUUgh
# plot(EndoCompare, which=2)
# shapiro.test(EndoCompare$residuals)
# hist(EndoCompare$residuals)
# plot(EndoCompare, which=1)
#find the least square means by group
LSD<-lsmeans(EndoCompare, ~endo)
#get the significant differences between the least square means
LSM<-cld(LSD,Letters = LETTERS, decreasing=T)
#output that data
out <- capture.output(LSM)
cat(out, file=EndoCompareFile, sep="\n", append=TRUE)
}
NFBlupsGenoJustPheno
justthebitsNF <- NFBlupsGenoJustPheno[2:10]
justthebitsNF <- NFBlupsGenoJustPheno[2:8]
justthebitsNF
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_CorrelationfromPSYCH_BLUPs_NoField.png",sep=""), width = 500, height = 500)
pairs.panels(justthebitsNF, scale = TRUE)
dev.off()
linearmodel <- function(SampleDFtoModel,TitleAddendum, endoCheck = FALSE){
ptm <- proc.time()
#For Debugging
# SampleDFtoModel <- CleanedInfoNF
# TitleAddendum <- "CleanedOutliersNF"
#Establish a file to output the statistical analysis results to
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
#write a header in that stats file
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
#make a dataframe to hold the BLUPs after the models are done
blupHolder <- data.frame("Inbred" = sort(unique(SampleDFtoModel$BookInbred)))
#make a dataframe to hold the variances due to different factors
VarDF <- data.frame("Carb" = colnames(SampleDFtoModel)[5:11],"Inbred" = rep(NA,7),"Envi" = rep(NA,7),"Inbred:Envi" = rep(NA,7),  "superblock" = rep(NA,7), "Col" = rep(NA,7),"Row" = rep(NA,7),"block" = rep(NA,7),"Residuals"= rep(NA,7))
#figure out where the traits start and stop
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
#write those traits to a vector
carbs <- colnames(SampleDFtoModel)[c1:c2]
######Iteratite though all the traits#####
for(j in 1:length(carbs)){
print(paste0("Starting ",carbs[j]," Model Generation"))
#output the statistics about this trait to the stats file
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Establish Model
modelpastecheck<-  paste0(carbs[j], " ~ (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
#Output the model to the stats file
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
#Run the Model
#get rid of the one sample that is throwing an error because its NA
SampleDFtoModel_noTraitNAs<-subset(SampleDFtoModel, !is.na(superblock))
# SampleDFtoModel_noTraitNAs <- SampleDFtoModel_noTraitNAs[-which(is.na(SampleDFtoModel_noTraitNAs[carbs[j]])),]
#plug in the model
print("Run the Big Model")
modelExpansive <- lme4::lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
#Step through the model to find the shortened, better fitting version
print(paste0("Step Through ",carbs[j]," Model Generation"))
x <- stepcAIC(modelExpansive,direction="backward")
#Extract that shorter model
model <- x$finalModel
print(paste0("Read Out ",carbs[j]," BLUPS from selected model"))
#get the random effects of that model
RandomEffects <- ranef(model)
#hold the blups
tempBlup <- data.frame("Inbred" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Inbred", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
###### Check Assumptions#######
print(paste0("Check  ",carbs[j]," Model Assumption"))
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
#######calculate model R2
print(paste0("Calculate ",carbs[j]," R2"))
r2 <- MuMIn::r.squaredGLMM(model)
out <- capture.output(r2[2])
cat(paste("The r^2 value of this model for", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
######## Calculate heritability
model_variances <- as.data.frame(VarCorr(model))
print(paste0("Calculate ",carbs[j]," Heritability"))
#Where are the geno, gxe, and residual stats located in the dataframe?
geno <- which(model_variances$grp == "BookInbred")
gxe <- which(model_variances$grp == "BookInbred:Envi")
resid <- which(model_variances$grp == "Residual")
#broad sence heritability calculated as variance of genotype/ (variance of geno + var of gxe / num of enviornments + var of error/num of replicates and environ)
h2 <- model_variances$vcov[geno]/(model_variances$vcov[geno]+(model_variances$vcov[gxe]/4)+(model_variances$vcov[resid]/8))
out <- capture.output(h2)
cat(paste("The heritability of", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
#### Shapiro-Wilk test normality test
####p-val < alpha : reject H~0~ that the residuals are normally distributed.
out <- shapiro.test(residuals(model))
print(out)
cat(paste("The Shapiro-Wilk test normality test results of", carbs[j] ,"is", out, ". p-val < alpha : reject H~0~ that the residuals are normally distributed."), file= statsfile, sep="\n", append=TRUE)
# ###### Levene's test
# ###Will provide a p-value to unequal variance testing.p-val < alpha : reject H~0~ that the variances are equal.
# out <- leveneTest(carbs[j]~endo,data=SampleDFtoModel)
# print(out)
# cat(paste("The Levene's test results of", carbs[j] ," and endosperm mutant is", out, ". Will provide a p-value to unequal variance testing.p-val < alpha : reject H~0~ that the variances are equal."), file= statsfile, sep="\n", append=TRUE)
#
#Only Do the parts with the endosperm component if endoCheck is set to true since it takes a long time
if(endoCheck == TRUE){
######## Compare model with one with Endosperm #####
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
#####Modeling
print(paste0("Check ",carbs[j]," Model with Endosperm components"))
modelpasteendo<-  paste0(carbs[j], " ~ (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
#plug in the model
modelendoExpansive <- lmer(modelpasteendo,
data=SampleDFtoModel_noTraitNAs, REML = TRUE)
#Step through the model to find the shortened, better fitting version
print(paste0("Step through ",carbs[j]," Model with Endosperm components"))
x <- stepcAIC(modelExpansive,direction="backward")
#Extract that shorter model
modelendo <- x$finalModel
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
}
print(paste0("Find what variances arribute to what in ",carbs[j]))
formula1 <- paste0(colnames(SampleDFtoModel)[j+4],"~ BookInbred*Envi  + superblock%in%Envi + superblock%in%block%in%Envi+ Row%in%Envi+ Col%in%Envi")
fit1 <- lm(formula1,data=SampleDFtoModel)
AIC1 <- extractAIC(fit1)
AIC1
summary(fit1)$r.square
print(anova(fit1))
out <- anova(fit1)
SStotal <- sum(out$`Sum Sq`)
for(i in 1:8){
#variance explained is caluclated by the sum of squares divided by the sum of squares total
VarDF[j,i+1] <- (out$`Sum Sq`[i]/SStotal)}
}
#######Graph the different variances explained by different factors######
VarDFMelt <- reshape2::melt(VarDF)
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,".png",sep=""), width = 1000, height = 500)
print(barchart(~value|variable, group = factor(Carb), data= VarDFMelt,reverse.rows = FALSE,main = "Percent Phenotypic Variance Explained",layout = c(8,1),
key = simpleKey(text = colnames(SampleDFtoModel)[5:11],
rectangles = TRUE, points = FALSE, space = "right")))
dev.off()
#######Graph the different variances explained by different factors with GGPlot ######
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,"_ggplot.png",sep=""), width = 1000, height = 500)
p <- ggplot(VarDFMelt, aes(y = Carb, value)) +
geom_bar(aes(fill = variable),stat = "identity",  position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
print(p)
dev.off()
#Write the variances to a file
write.table(VarDF, file = paste0("Data/OutputtedData/WSMDP_CarbPheno_Anova_Variances_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
beep(3)
print(proc.time() - ptm)
return(blupHolder)
}
#######TOFIX######
# Error in ranova(model) :
# number of rows in use has changed: remove missing values?
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
#########Read in the output from NIR##########
####Copied pasted and modified from Hislop_carb_eqn_validation.R
#6 files types. The starch and sugar predictions and the equations made by calibrating with only high wsp lines, high wsp var sug, high wsp high sug
CarbCombos <- c("hwspsu","hwspst","lwspwfsu","lwspwfst","lwspnfsu","lwspwfst")
#establish DF to hold the file readins
CarbDF <- list()
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(i in 1:6){CarbDF[[i]] <- read.csv(paste("Data/RawData/wsmdp",CarbCombos[i],"pls_predA-G.txt",sep = ""), skip = 9)}
#########################
###Manipulate and clean sample data###
#########################
########now match up these predicted values with the sample info and mash it all up into one########
#combine the starch and sugar files for each equation type. Condense takes all the repeated scans of the same sample and averages them
HWSPsDF <- AgPredOutput(StarchDF = CarbDF[[1]], SugDF = CarbDF[[2]], condense = TRUE)
LWSPWFsDF <- AgPredOutput(StarchDF = CarbDF[[3]], SugDF = CarbDF[[4]], condense = TRUE)
LWSPNFsDF <- AgPredOutput(StarchDF = CarbDF[[5]], SugDF = CarbDF[[6]], condense = TRUE)
InfoCombination <- function(NIRDF, SampleInfoDF, BookInfoDF){
OutDF <- NIRDF
OutDF$endo <- SampleInfoDF$endo[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
#eliminate SE markers
OutDF$endo[which(OutDF$endo == "SE")] <- "field"
OutDF$Inbred <- SampleInfoDF$Variety[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
OutDF$BookInbred <- BookInfoDF$Inbred[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$PlotNum <- NIRDF$Row
OutDF$SampleRep <- NIRDF$Rep
OutDF$superblock <- BookInfoDF$superblock[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$block <- BookInfoDF$block[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$EnviRep <- BookInfoDF$rep[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Row <- BookInfoDF$Row[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Col <- BookInfoDF$Col[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Check <- BookInfoDF$Check[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsFill <- BookInfoDF$IsFill[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsExperimental <- BookInfoDF$IsExperimental[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
#add in a year/location environment factor
OutDF$Envi <- paste0(BookInfoDF$Year[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)], BookInfoDF$Location[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)])
#set everything to factors thats not carb data
c1 <- which(colnames(OutDF)=="Starch")
c2 <- which(colnames(OutDF)=="Total.Sugar")
OutDF[-c(c1:c2)] <- lapply(OutDF[-c(c1:c2)], as.factor)
return(OutDF)
}
HWSPsDF <- InfoCombination(HWSPsDF,SampleInfo,BookInfo)
LWSPWFsDF <- InfoCombination(LWSPWFsDF,SampleInfo,BookInfo)
LWSPNFsDF <- InfoCombination(LWSPNFsDF,SampleInfo,BookInfo)
#Eliminate irrelivant endosperm mutants from each df. We don't want to include sh2 samples that were predicted by the HWSP calibrated equations
HWSPs <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "su1se1"),]
LWSPWFs <- LWSPWFsDF[which(LWSPNFsDF$endo != "su1se1" & LWSPNFsDF$endo != "su1" & LWSPNFsDF$endo != ""),]
LWSPNFs <- LWSPNFsDF[which(LWSPNFsDF$endo == "sh2" | LWSPNFsDF$endo == "su1sh2-i"),]
# #lets look at the validation data that I predicted from kahtleen and Jareds data and output it for further analysis
# jared <- HWSPsDF[which(HWSPsDF$Year == "sc"),]
# write.csv(jared, file = "Data/OutputtedData/JaredsPredictedLineswHWSPeqn.csv")
# kathleen <- HWSPsDF[which(HWSPsDF$Year != "13"&HWSPsDF$Year != "14"&HWSPsDF$Year != "15"&HWSPsDF$Year != "sc"),]
# write.csv(kathleen,file = "Data/OutputtedData/KathleenPredictedLineswHWSPeqn.csv")
#
########mash it all together ######
#All the predictions with the field lines
CarbInfoExpandedWFDF <- subset(rbind(HWSPs,LWSPWFs), !is.na(IsExperimental))
#all the predictions without the field lines
CarbInfoExpandedNFDF <- subset(rbind(HWSPs,LWSPNFs), !is.na(IsExperimental))
#visualize these data sets pre cleaning
CarbDataFrameVis(CarbInfoExpandedWFDF,"WithField_WithOutliers")
CarbDataFrameVis(CarbInfoExpandedNFDF,"NoField_WithOutliers")
#clean up the predictive data frames. Reassign or delete outliers
CleanedInfoWF <- CarbOutlierCleanup(CarbInfoExpandedWFDF,"WF",alpha = 0.05)
CleanedInfoNF <- CarbOutlierCleanup(CarbInfoExpandedNFDF,"NF",alpha = 0.05)
write.csv(file = "Data/OutputtedData/CleanedInfoWFOutput.csv",CleanedInfoWF)
write.csv(file = "Data/OutputtedData/CleanedInfoNFOutput.csv",CleanedInfoNF)
#revisualize the dataframes
CarbDataFrameVis(CleanedInfoWF,"WithField_Cleaned")
CarbDataFrameVis(CleanedInfoNF,"NoField_Cleaned")
#write the names of the varieties used to a csv file so we can find the corresponding GBS data
write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataNF.csv",unique(CleanedInfoNF[c("Inbred", "endo")]))
write.csv(file = "Data/OutputtedData/InbredsWithinWSMDPCarbDataWF.csv",unique(CleanedInfoWF[c("Inbred", "endo")]))
#clean up the predictive seperated data frames. Reassign or delete outliers
CleanedInfoHWSP <- CarbOutlierCleanup(HWSPs,"HWSP",alpha = 0.05)
CleanedInfoLWSPNF <- CarbOutlierCleanup(LWSPNFs,"LWSPNFs",alpha = 0.05)
CleanedInfoLWSPWF <- CarbOutlierCleanup(LWSPWFs,"LWSPWFs",alpha = 0.05)
linearmodel <- function(SampleDFtoModel,TitleAddendum, endoCheck = FALSE){
ptm <- proc.time()
#For Debugging
# SampleDFtoModel <- CleanedInfoNF
# TitleAddendum <- "CleanedOutliersNF"
#Establish a file to output the statistical analysis results to
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
#write a header in that stats file
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
#make a dataframe to hold the BLUPs after the models are done
blupHolder <- data.frame("Inbred" = sort(unique(SampleDFtoModel$BookInbred)))
#make a dataframe to hold the variances due to different factors
VarDF <- data.frame("Carb" = colnames(SampleDFtoModel)[5:11],"Inbred" = rep(NA,7),"Envi" = rep(NA,7),"Inbred:Envi" = rep(NA,7),  "superblock" = rep(NA,7), "Col" = rep(NA,7),"Row" = rep(NA,7),"block" = rep(NA,7),"Residuals"= rep(NA,7))
#figure out where the traits start and stop
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
#write those traits to a vector
carbs <- colnames(SampleDFtoModel)[c1:c2]
######Iteratite though all the traits#####
for(j in 1:length(carbs)){
print(paste0("Starting ",carbs[j]," Model Generation"))
#output the statistics about this trait to the stats file
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Establish Model
modelpastecheck<-  paste0(carbs[j], " ~ (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
#Output the model to the stats file
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
#Run the Model
#get rid of the one sample that is throwing an error because its NA
SampleDFtoModel_noTraitNAs<-subset(SampleDFtoModel, !is.na(superblock))
# SampleDFtoModel_noTraitNAs <- SampleDFtoModel_noTraitNAs[-which(is.na(SampleDFtoModel_noTraitNAs[carbs[j]])),]
#plug in the model
print("Run the Big Model")
modelExpansive <- lme4::lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
#Step through the model to find the shortened, better fitting version
print(paste0("Step Through ",carbs[j]," Model Generation"))
x <- stepcAIC(modelExpansive,direction="backward")
#Extract that shorter model
model <- x$finalModel
print(paste0("Read Out ",carbs[j]," BLUPS from selected model"))
#get the random effects of that model
RandomEffects <- ranef(model)
#hold the blups
tempBlup <- data.frame("Inbred" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Inbred", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
###### Check Assumptions#######
print(paste0("Check  ",carbs[j]," Model Assumption"))
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
#######calculate model R2
print(paste0("Calculate ",carbs[j]," R2"))
r2 <- MuMIn::r.squaredGLMM(model)
out <- capture.output(r2[2])
cat(paste("The r^2 value of this model for", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
######## Calculate heritability
model_variances <- as.data.frame(VarCorr(model))
print(paste0("Calculate ",carbs[j]," Heritability"))
#Where are the geno, gxe, and residual stats located in the dataframe?
geno <- which(model_variances$grp == "BookInbred")
gxe <- which(model_variances$grp == "BookInbred:Envi")
resid <- which(model_variances$grp == "Residual")
#broad sence heritability calculated as variance of genotype/ (variance of geno + var of gxe / num of enviornments + var of error/num of replicates and environ)
h2 <- model_variances$vcov[geno]/(model_variances$vcov[geno]+(model_variances$vcov[gxe]/4)+(model_variances$vcov[resid]/8))
out <- capture.output(h2)
cat(paste("The heritability of", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
#### Shapiro-Wilk test normality test
####p-val < alpha : reject H~0~ that the residuals are normally distributed.
out <- shapiro.test(residuals(model))
print(out)
cat(paste("The Shapiro-Wilk test normality test results of", carbs[j] ,"is", out, ". p-val < alpha : reject H~0~ that the residuals are normally distributed."), file= statsfile, sep="\n", append=TRUE)
# ###### Levene's test
# ###Will provide a p-value to unequal variance testing.p-val < alpha : reject H~0~ that the variances are equal.
# out <- leveneTest(carbs[j]~endo,data=SampleDFtoModel)
# print(out)
# cat(paste("The Levene's test results of", carbs[j] ," and endosperm mutant is", out, ". Will provide a p-value to unequal variance testing.p-val < alpha : reject H~0~ that the variances are equal."), file= statsfile, sep="\n", append=TRUE)
#
#Only Do the parts with the endosperm component if endoCheck is set to true since it takes a long time
if(endoCheck == TRUE){
######## Compare model with one with Endosperm #####
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
#####Modeling
print(paste0("Check ",carbs[j]," Model with Endosperm components"))
modelpasteendo<-  paste0(carbs[j], " ~ (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
#plug in the model
modelendoExpansive <- lmer(modelpasteendo,
data=SampleDFtoModel_noTraitNAs, REML = TRUE)
#Step through the model to find the shortened, better fitting version
print(paste0("Step through ",carbs[j]," Model with Endosperm components"))
x <- stepcAIC(modelExpansive,direction="backward")
#Extract that shorter model
modelendo <- x$finalModel
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
}
print(paste0("Find what variances arribute to what in ",carbs[j]))
formula1 <- paste0(colnames(SampleDFtoModel)[j+4],"~ BookInbred*Envi  + superblock%in%Envi + superblock%in%block%in%Envi+ Row%in%Envi+ Col%in%Envi")
fit1 <- lm(formula1,data=SampleDFtoModel)
AIC1 <- extractAIC(fit1)
AIC1
summary(fit1)$r.square
print(anova(fit1))
out <- anova(fit1)
SStotal <- sum(out$`Sum Sq`)
for(i in 1:8){
#variance explained is caluclated by the sum of squares divided by the sum of squares total
VarDF[j,i+1] <- (out$`Sum Sq`[i]/SStotal)}
}
#######Graph the different variances explained by different factors######
VarDFMelt <- reshape2::melt(VarDF)
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,".png",sep=""), width = 1000, height = 500)
print(barchart(~value|variable, group = factor(Carb), data= VarDFMelt,reverse.rows = FALSE,main = "Percent Phenotypic Variance Explained",layout = c(8,1),
key = simpleKey(text = colnames(SampleDFtoModel)[5:11],
rectangles = TRUE, points = FALSE, space = "right")))
dev.off()
#######Graph the different variances explained by different factors with GGPlot ######
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,"_ggplot.png",sep=""), width = 1000, height = 500)
p <- ggplot(VarDFMelt, aes(y = Carb, value)) +
geom_bar(aes(fill = variable),stat = "identity",  position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
print(p)
dev.off()
#Write the variances to a file
write.table(VarDF, file = paste0("Data/OutputtedData/WSMDP_CarbPheno_Anova_Variances_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
beep(3)
print(proc.time() - ptm)
return(blupHolder)
}
#######TOFIX######
# Error in ranova(model) :
# number of rows in use has changed: remove missing values?
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
