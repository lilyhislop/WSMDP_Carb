c
c
#########################
###Establish Workspace###
#########################
#begin by establishing a new fresh work space
rm(list=ls())
library(dplyr)
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
source("R/CarbEquationComparison.R")
#establish the working directory
getwd()
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
#########################
###Equation Evaluation###
#########################
#read in the weblab of the validation samples
ActualFile <- "Data/WSMDP_EqnValidation_Wetlab_Data.csv"
#######Visualize the Validation Dataset for the the different models#####
####this code looks at all validation data set for the different models and outputs their R^2 value
#all the differen models
models <- c("pls","pcr","modpls")
#the different calibration sets
scaleVerb <- c("Global","su1 calibrated","sh2 calibrated")
scaleAbr <- c("gl","su1","sh2")
#Val equations
setVerb <- "Validation"
setArb <- "val"
ValidationDF <- data.frame()
#itterate through the different models and calibration types
for(j in 1:3){
for(i in 1:3){
PredictionStarchFile <-paste("Data/RawData/wsmdp2021",scaleAbr[j],"st",models[i],setArb,".txt", sep = "")
PredictionSugarFile <-paste("Data/RawData/wsmdp2021",scaleAbr[j],"su",models[i],setArb,".txt", sep = "")
#read out the outputs of those comparisons
ValidationDF <- rbind(ValidationDF, CarbEquationComparison(ActualFile,PredictionStarchFile,PredictionSugarFile,setVerb,scaleAbr[j], models[i]))
}}
#write all of that to a csv
write.csv(ValidationDF, "Data/OutputtedData/WSMDP_Equations_fit_Validation_Evaluation.csv")
ValDFAve[order(ValDFAve$r,decreasing = TRUE)[1],] #this one is the highest scoring model!
#what if we only apply the sh2 calibration to the sh2 lines, etc. This code does that
ValidationDF <- MixedEndoEqnValidation(ActualFile,ValidationDF)
#Which model is the best over all?
ValDFAve <- aggregate(r~scale + modeltype, ValidationDF, FUN = mean)
#Which model is the best over all?
ValDFAve <- aggregate(r~scale + modeltype, ValidationDF, FUN = mean)
ValDFAve[order(ValDFAve$r,decreasing = TRUE)[1],] #this one is the highest scoring model!
###########statistical Comparison of predicted vs actual for the samples used to create eqn
ComparisonSu1SugarFile <- read.delim("Data/RawData/wsmdp_allsamples_inclval_wwet_wsmdp2021su1supls.txt", header = TRUE, sep = "", skip = 18)
ComparisonSh2SugarFile <- read.delim("Data/RawData/wsmdp_allsamples_inclval_wwet_wsmdp2021sh2supls.txt", header = TRUE, sep = "", skip = 18)
ComparisonOtSugarFile <- read.delim("Data/RawData/wsmdp_allsamples_inclval_wwet_wsmdp2021otsupls.txt", header = TRUE, sep = "", skip = 18)
ComparisonSu1StarchFile <- read.delim("Data/RawData/wsmdp_allsamples_inclval_wwet_wsmdp2021su1stpls.txt", header = TRUE, sep = "", skip = 18)
ComparisonSh2StarchFile <- read.delim("Data/RawData/wsmdp_allsamples_inclval_wwet_wsmdp2021sh2stpls.txt", header = TRUE, sep = "", skip = 18)
#su1
condenseSug <- function(ComparisonDF){
spacers <- which(ComparisonSu1SugarFile[,2] == "vs.")
ComparisonDFFruct <- ComparisonDF[c(1:spacers[1]),2:4]
ComparisonDFGluc <- ComparisonDF[(spacers[1]+8):(spacers[2]-1),2:4]
ComparisonDFSuc <- ComparisonDF[(spacers[2]+8):(spacers[3]-1),2:4]
ComparisonDFTot <- ComparisonDF[(spacers[3]+8):(dim(ComparisonDF)[1]),2:4]
ComparisonSugar<- merge(merge(merge(ComparisonDFFruct, ComparisonDFGluc, by= "Sample"),ComparisonDFSuc, by = "Sample"), ComparisonDFTot, by= "Sample")
colnames(ComparisonSugar) <- c("Samples", "Fructose.Wetlab","Fructose.Eqn", "Glucose.Wetlab","Glucose.Eqn",  "Sucrose.Wetlab","Sucrose.Eqn",  "TotalSug.Wetlab","TotalSug.Eqn")
ComparisonSugar[2:9] <- sapply(ComparisonSugar[2:9],as.numeric)
return(ComparisonSugar)
}
condenseStarch <- function(ComparisonDF){
spacers <- which(ComparisonDF[,2] == "vs.")
ComparisonDFStar <- ComparisonDF[1:(spacers[1]-1),2:4]
ComparisonDFPoly <- ComparisonDF[(spacers[1]+8):(spacers[2]-1),2:4]
ComparisonDFWSP <- ComparisonDF[(spacers[2]+8):(dim(ComparisonDF)[1]),2:4]
ComparisonStar<- merge(merge(ComparisonDFStar, ComparisonDFPoly, by= "Sample"),ComparisonDFWSP, by = "Sample")
colnames(ComparisonStar) <- c("Samples", "Starch.Wetlab","Starch.Eqn", "TotalPoly.Wetlab","TotalPoly.Eqn",  "WSP.Wetlab","WSP.Eqn")
ComparisonStar[2:7] <- sapply(ComparisonStar[2:7],as.numeric)
return(ComparisonStar)
}
Su1Sug <- condenseSug(ComparisonSu1SugarFile)
Sh2Sug <- condenseSug(ComparisonSh2SugarFile)
OtSug <- condenseSug(ComparisonOtSugarFile)
Su1St <- condenseStarch(ComparisonSu1StarchFile)
Sh2St <- condenseStarch(ComparisonSh2StarchFile)
CarbInfosu1s <- CarbInfoExpandedDF[which(CarbInfoExpandedDF$endo == "su1"),]
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#Read in packages made for these codesets
source("R/CarbEquationComparison.R")
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
source("R/CarbOutlierCleanup.R")
#Read in the output from NIR
NIRStarchOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","st","pls.txt", sep = "")
NIRSugarOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","su","pls.txt", sep = "")
#Read in the sample information
SampleInfo <- read.csv("Data/WSMDP_2014-2015_WINY_SampleInfo.csv")
#Fix the sample numbers that are labeled in the NY style e.g " 14A0255" or "15A0005" and change to just the row numbers
SampleInfo$Row <- SampleInfo$Sample.Number
SampleInfo$Row[which(nchar(SampleInfo$Row)>6)] <- substr(SampleInfo$Row[which(nchar(SampleInfo$Row)>6)],4,15)
tail(SampleInfo)
#Generate NIR Code
SampleInfo$NIRBase <- paste(substr(SampleInfo$year,3,4), ifelse(SampleInfo$location == "Wisconsin", "W","NY"), SampleInfo$Row,sep = "")
tail(SampleInfo)
#Assemble that together into a dataframe
CarbNIREqnOut <- data.frame(AgPredOutput(NIRStarchOutput,NIRSugarOutput,condense = TRUE))
#how does that look
head(CarbNIREqnOut)
#Cleanup the NIR output and add rows corresponding to their year and location
CarbNIREqnOut <- separate(CarbNIREqnOut, Samples, into = c("Year","Row","Rep"), sep = "([W.Y.-])", remove = FALSE)
CarbNIREqnOut$Location <- "W"
CarbNIREqnOut$Location[which(grepl("N",CarbNIREqnOut$Year))] = "NY"
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
CarbNIREqnOut <- CarbNIREqnOut[-c(1:2),]
tail(CarbNIREqnOut)
# CarbNIREqnOut$Year <- as.numeric(CarbNIREqnOut$Year)
CarbNIREqnOut$NIRBase <- paste(CarbNIREqnOut$Year,CarbNIREqnOut$Location, CarbNIREqnOut$Row, sep = "")
#Visualize the distribution of the traits from the NIR predicted outputs
summary(CarbNIREqnOut)
colnames(CarbNIREqnOut)
#Combine the Predicted outcome from the NIR with the information about the samples
setdiff(CarbNIREqnOut$NIRBase,SampleInfo$NIRBase)
setdiff(SampleInfo$NIRBase,CarbNIREqnOut$NIRBase)
CarbInfoExpandedDF <- merge(CarbNIREqnOut,SampleInfo, by = "NIRBase")
head(CarbInfoExpandedDF)
summary(CarbInfoExpandedDF)
library(tidyr)
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#Read in packages made for these codesets
source("R/CarbEquationComparison.R")
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
source("R/CarbOutlierCleanup.R")
#Read in the output from NIR
NIRStarchOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","st","pls.txt", sep = "")
NIRSugarOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","su","pls.txt", sep = "")
#Read in the sample information
SampleInfo <- read.csv("Data/WSMDP_2014-2015_WINY_SampleInfo.csv")
#Fix the sample numbers that are labeled in the NY style e.g " 14A0255" or "15A0005" and change to just the row numbers
SampleInfo$Row <- SampleInfo$Sample.Number
SampleInfo$Row[which(nchar(SampleInfo$Row)>6)] <- substr(SampleInfo$Row[which(nchar(SampleInfo$Row)>6)],4,15)
tail(SampleInfo)
#Generate NIR Code
SampleInfo$NIRBase <- paste(substr(SampleInfo$year,3,4), ifelse(SampleInfo$location == "Wisconsin", "W","NY"), SampleInfo$Row,sep = "")
tail(SampleInfo)
#Assemble that together into a dataframe
CarbNIREqnOut <- data.frame(AgPredOutput(NIRStarchOutput,NIRSugarOutput,condense = TRUE))
#how does that look
head(CarbNIREqnOut)
#Cleanup the NIR output and add rows corresponding to their year and location
CarbNIREqnOut <- separate(CarbNIREqnOut, Samples, into = c("Year","Row","Rep"), sep = "([W.Y.-])", remove = FALSE)
CarbNIREqnOut$Location <- "W"
CarbNIREqnOut$Location[which(grepl("N",CarbNIREqnOut$Year))] = "NY"
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
CarbNIREqnOut <- CarbNIREqnOut[-c(1:2),]
tail(CarbNIREqnOut)
# CarbNIREqnOut$Year <- as.numeric(CarbNIREqnOut$Year)
CarbNIREqnOut$NIRBase <- paste(CarbNIREqnOut$Year,CarbNIREqnOut$Location, CarbNIREqnOut$Row, sep = "")
#Visualize the distribution of the traits from the NIR predicted outputs
summary(CarbNIREqnOut)
colnames(CarbNIREqnOut)
#Combine the Predicted outcome from the NIR with the information about the samples
setdiff(CarbNIREqnOut$NIRBase,SampleInfo$NIRBase)
setdiff(SampleInfo$NIRBase,CarbNIREqnOut$NIRBase)
CarbInfoExpandedDF <- merge(CarbNIREqnOut,SampleInfo, by = "NIRBase")
head(CarbInfoExpandedDF)
summary(CarbInfoExpandedDF)
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
library(stringr)#
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
CarbNIREqnOut <- CarbNIREqnOut[-c(1:2),]
tail(CarbNIREqnOut)
# CarbNIREqnOut$Year <- as.numeric(CarbNIREqnOut$Year)
CarbNIREqnOut$NIRBase <- paste(CarbNIREqnOut$Year,CarbNIREqnOut$Location, CarbNIREqnOut$Row, sep = "")
#Visualize the distribution of the traits from the NIR predicted outputs
summary(CarbNIREqnOut)
colnames(CarbNIREqnOut)
setdiff(CarbNIREqnOut$NIRBase,SampleInfo$NIRBase)
setdiff(SampleInfo$NIRBase,CarbNIREqnOut$NIRBase)
CarbInfoExpandedDF <- merge(CarbNIREqnOut,SampleInfo, by = "NIRBase")
head(CarbInfoExpandedDF)
summary(CarbInfoExpandedDF)
CarbInfosu1s <- CarbInfoExpandedDF[which(CarbInfoExpandedDF$endo == "su1"),]
CarbInfosh2s <- CarbInfoExpandedDF[which(CarbInfoExpandedDF$endo == "sh2"),]
CarbInfoots <- CarbInfoExpandedDF[which(CarbInfoExpandedDF$endo != "sh2" & CarbInfoExpandedDF$endo != "su1" ),]
Su1s <- merge(merge(CarbInfosu1s,Su1Sug, by = "Samples"),Su1St, by = "Samples")
Sh2s <- merge(merge(CarbInfosh2s,Sh2Sug, by = "Samples"),Sh2St, by = "Samples")
Ots <- merge(merge(CarbInfoots,OtSug, by = "Samples"),Su1St, by = "Samples")
MixedEqnFull <- rbind(Su1s,Sh2s,Ots)
#Now I have a variable that has all the projected values, for the values used to calibrate the equations. WHat are the statistics on that?
#set carb to a number 1:7. carb <- c(Fructose, Glucose, Sucrose, Total Sugar, Starch, Total Polysaccharide, WSP)
EqnStats <- function(DF){
Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
RMSEP = rep(NA,7),
bias = rep(NA,7),
SEE = rep(NA,7))
for(carb in 1:7){
Out$RMSEP[carb] <- sqrt(sum((DF[,carb*2+21]- DF[,carb*2+20])^2)/dim(DF)[1])
Out$bias[carb] <- mean(DF[,carb*2+21]) - mean(DF[,carb*2+20])
Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
Out$Carb[carb] <- colnames(DF[carb*2+21])
}
return(Out)
}
MixedEqnStats <- EqnStats(MixedEqnFull)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_wOutliers_Histogram.png")
par(mfrow=c(3,3))
for(i in 6:12){
hist(CarbInfoExpandedDF[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_wOUtliers_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_wOutliers_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 6:12){
hist(CleanedInfo[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
MixedEqnStats
ValidationDF
MixedEqnFull[20:34]
MixedEqnFull[,20:34]
MixedEqnFull[,21:35]
#Now I have a variable that has all the projected values, for the values used to calibrate the equations. WHat are the statistics on that?
#set carb to a number 1:7. carb <- c(Fructose, Glucose, Sucrose, Total Sugar, Starch, Total Polysaccharide, WSP)
EqnStats <- function(DF){
Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
RMSEP = rep(NA,7),
bias = rep(NA,7),
SEE = rep(NA,7))
dfpos <- c(2,4,6,8,10,12,14)
for(carb in 1:7){
Out$RMSEP[carb] <- sqrt(sum((DF[,dfpos[carb]]- DF[,dfpos[carb]-1])^2)/dim(DF)[1])
Out$bias[carb] <- mean(DF[,dfpos[carb]]) - mean(DF[,dfpos[carb]-1])
Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
Out$Carb[carb] <- colnames(DF[dfpos[carb]])
}
return(Out)
}
MixedEqnStats <- EqnStats(MixedEqnFull[,22:35])
MixedEqnStats
DF <- MixedEqnFull[,22:35]
Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
RMSEP = rep(NA,7),
bias = rep(NA,7),
SEE = rep(NA,7))
dfpos <- c(2,4,6,8,10,12,14)
carb = 2
DF[,dfpos[carb]]
DF[dfpos[carb]]
head([dfpos[carb]])
head(dfpos[carb]])
head(DF[dfpos[carb]])
head(DF[dfpos[carb]-1])
carb = 7
Out$RMSEP[carb] <- sqrt(sum((DF[,dfpos[carb]]- DF[,dfpos[carb]-1])^2)/dim(DF)[1])
head(DF[dfpos[carb]])
head(DF[dfpos[carb]-1])
dfpos[carb]
Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
Out$Carb[carb] <- colnames(DF[dfpos[carb]])
#Now I have a variable that has all the projected values, for the values used to calibrate the equations. WHat are the statistics on that?
#set carb to a number 1:7. carb <- c(Fructose, Glucose, Sucrose, Total Sugar, Starch, Total Polysaccharide, WSP)
EqnStats <- function(DF){
Out <- data.frame(Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP"),
RMSEP = rep(NA,7),
bias = rep(NA,7),
SEE = rep(NA,7))
dfpos <- c(2,4,6,8,10,12,14)
for(carb in 1:7){
Out$RMSEP[carb] <- sqrt(sum((DF[,dfpos[carb]]- DF[,dfpos[carb]-1])^2)/dim(DF)[1])
Out$bias[carb] <- mean(DF[,dfpos[carb]]) - mean(DF[,dfpos[carb]-1])
Out$SEE[carb] <- sqrt((dim(DF)[1]/(dim(DF)[1]-1))*(Out$RMSEP[carb]^2-Out$bias[carb]^2))
Out$Carb[carb] <- colnames(DF[dfpos[carb]])
}
return(Out)
}
Df
head(DF)
i = 2
dfpos <- c(2,4,6,8,10,12,14)
Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP")
carbCompare  <- lm(DF[dfpos[i]]~ DF[dfpos[i]-1])
carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
label <- "tessst"
carbFileName <- paste("Figures/",set,"/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
carbFileName <- paste("Figures/",wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
png(carbFileName)
par(mfrow=c(1,1))
print(summary(carbCompare))
rsqua <- summary(carbCompare)$r.squared
plot(Prediction[,i]~Actual[,i],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",scale,Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3," using ", modeltype ,sep = ""))
abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
# text(15,max(Prediction[,i])-5,labels = paste("r^2 =",trunc(rsqua*10^3)/10^3))
slope <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
intercept <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
r <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
trait <- colnames(Actual[i])
stats <- data.frame(set, scale, modeltype,trait, slope, intercept, r)
# ValidationDF <- rbind(ValidationDF, stats)
dev.off()
}
}
carbFileName <- paste("Figures/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
carbFileName
par(mfrow=c(1,1))
print(summary(carbCompare))
rsqua <- summary(carbCompare)$r.squared
rsqua
plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",scale,Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3," using ", modeltype ,sep = ""))
plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3,sep = ""))
abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
slope <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
intercept <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
r <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
trait <- colnames(Actual[i])
stats <- data.frame(set, scale, modeltype,trait, slope, intercept, r)
stats <- data.frame(slope, intercept, r)
slope <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
intercept <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
r <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
trait <- Carb[i]
stats <- data.frame(slope, intercept, r)
#Visualize these
R2Vis <- function(DF, label){
dfpos <- c(2,4,6,8,10,12,14)
Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP")
for(i in 1:7){
carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
carbFileName <- paste("Figures/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
png(carbFileName)
par(mfrow=c(1,1))
print(summary(carbCompare))
rsqua <- summary(carbCompare)$r.squared
plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3,sep = ""))
abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
# text(15,max(Prediction[,i])-5,labels = paste("r^2 =",trunc(rsqua*10^3)/10^3))
slope <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
intercept <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
r <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
trait <- Carb[i]
stats <- data.frame(slope, intercept, r)
# ValidationDF <- rbind(ValidationDF, stats)
dev.off()
}
}
MixedEqnStatsR <- R2Vis(MixedEqnFull[,22:35], "Uncleaned Predicted Vs Actual for Calibration Samples")
summary(MixedEqnFull[,22:35])
MixedEqnStatsR
#Visualize these
R2Vis <- function(DF, label, Out){
dfpos <- c(2,4,6,8,10,12,14)
Carb = c("Fructose", "Glucose", "Sucrose", "Total Sugar", "Starch", "Total Polysaccharide", "WSP")
for(i in 1:7){
carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
carbFileName <- paste("Figures/wsmdp2021_",label,Carb[i],"_NIR_Eqn_Prediction_vis.png", sep = "")
png(carbFileName)
par(mfrow=c(1,1))
print(summary(carbCompare))
rsqua <- summary(carbCompare)$r.squared
plot(DF[,dfpos[i]]~ DF[,dfpos[i]-1],
pch = 16,
xlab = paste(Carb[i]," wetlab (%)",sep = ""),
ylab = paste(Carb[i]," NIR Prediction (%)",sep = ""),
main = paste("Actual Vs Predicted ",Carb[i]," r^2 =",trunc(rsqua*10^3)/10^3,sep = ""))
abline(coefficients(carbCompare), lwd = 2, lty = 2, col = "red")
# text(15,max(Prediction[,i])-5,labels = paste("r^2 =",trunc(rsqua*10^3)/10^3))
Out$slope[i] <- trunc(10^3*summary(carbCompare)$coefficients[2])/10^3
Out$intercept[i] <- trunc(10^3*summary(carbCompare)$coefficients[1])/10^3
Out$R2[i] <- trunc(10^3*summary(carbCompare)$r.squared)/10^3
dev.off()
}
return(Out)
}
MixedEqnStatsR <- R2Vis(MixedEqnFull[,22:35], "Uncleaned Predicted Vs Actual for Calibration Samples", MixedEqnStats)
MixedEqnStatsR
i = 5
carbCompare  <- lm(DF[,dfpos[i]]~ DF[,dfpos[i]-1])
carbCompare
DF[,dfpos[i]]
DF[dfpos[i]]
head(DF[dfpos[i]])
head(DF[dfpos[i]-1])
which(abs(DF[,dfpos[i]]- DF[,dfpos[i]-1])>10)
DF[which(abs(DF[,dfpos[i]]- DF[,dfpos[i]-1])>10)]
DF[which(abs(DF[,dfpos[i]]- DF[,dfpos[i]-1])>10),]
MixedEqnFull
#the NIR scanned the wetlab samples multiple times. Average all the wetlab preditions. This also orders the samples alphanumerically
MixedEqnFullMerged <- MixedEqnFull %>%
group_by(Samples) %>%
summarise(Starch = mean(Starch),Total.Polysaccharides = mean(Total.Polysaccharides),
WSP = mean(WSP), Glucose =mean(Glucose), Fructose = mean(Fructose),
Sucrose = mean(Sucrose), Total.Sugar = mean(Total.Sugar),
Fructose.Wetlab = mean(Fructose.Wetlab), Fructose.Eqn = mean(Fructose.Eqn),
Glucose.Wetlab = mean(Glucose.Wetlab), Glucose.Eqn = mean(Glucose.Eqn),
Sucrose.Wetlab = mean(Sucrose.Wetlab), Sucrose.Eqn = mean(Sucrose.Eqn),
TotalSug.Wetlab = mean(TotalSug.Wetlab), TotalSug.Eqn = mean(TotalSug.Eqn),
Starch.Wetlab = mean(Starch.Wetlab), Starch.Eqn = mean(Starch.Eqn),
TotalPoly.Wetlab = mean(TotalPoly.Wetlab), TotalPoly.Eqn = mean(TotalPoly.Eqn),
WSP.Wetlab = mean(WSP.Wetlab), WSP.Eqn = mean(WSP.Eqn),)
#the NIR scanned the wetlab samples multiple times. Average all the wetlab preditions. This also orders the samples alphanumerically
MixedEqnFullMerged <- MixedEqnFull %>%
group_by(Samples) %>%
summarise(Starch = mean(Starch),Total.Polysaccharides = mean(Total.Polysaccharides),
WSP = mean(WSP), Glucose =mean(Glucose), Fructose = mean(Fructose),
Sucrose = mean(Sucrose), Total.Sugar = mean(Total.Sugar),
Fructose.Wetlab = mean(Fructose.Wetlab), Fructose.Eqn = mean(Fructose.Eqn),
Glucose.Wetlab = mean(Glucose.Wetlab), Glucose.Eqn = mean(Glucose.Eqn),
Sucrose.Wetlab = mean(Sucrose.Wetlab), Sucrose.Eqn = mean(Sucrose.Eqn),
TotalSug.Wetlab = mean(TotalSug.Wetlab), TotalSug.Eqn = mean(TotalSug.Eqn),
Starch.Wetlab = mean(Starch.Wetlab), Starch.Eqn = mean(Starch.Eqn),
TotalPoly.Wetlab = mean(TotalPoly.Wetlab), TotalPoly.Eqn = mean(TotalPoly.Eqn),
WSP.Wetlab = mean(WSP.Wetlab), WSP.Eqn = mean(WSP.Eqn))
MixedEqnFullMerged
MixedEqnFullMerged[,9:22]
MixedEqnStats <- EqnStats(MixedEqnFullMerged[,9:22])
warnings()
as.dataframe(MixedEqnFullMerged[,9:22])
data.frame(MixedEqnFullMerged[,9:22
])
MixedEqnStats <- EqnStats(data.frame(MixedEqnFullMerged[,9:22]))
MixedEqnStatsR <- R2Vis(data.frame(MixedEqnFullMerged[,9:22]), "Merged_PredVsWetlab_for_Calibration_Samples", MixedEqnStats)
MixedEqnStatsR
write.csv(MixedEqnStats, "Data/OutputtedData/WSMDP_MixedEquation_Merged_Statistics.csv")
