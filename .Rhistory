}
}
#if the outlier has a pvalue larger than the alpha, set the sucrose to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("Sucrose Nulled")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
ProbSamples
CarbDataFrame <- CarbInfoExpandedDF
#lets tease out outliers
#Establish to remove list
toremove <- c()
#establish outlier record dataframe
ProbSamples <- data.frame()
# ProbSamples <- data.frame()
Subset <- c(1:2,CarbColumns, VarietyPos,22)
recordKeeping <- function(Action){
out <- data.frame(CarbDataFrame$DFPosition[i],CarbDataFrame[PosOutliers[i],c(1:2,CarbColumns, VarietyPos)],Action)
names(out) <- names(ProbSamples)
ProbSamples <- rbind(ProbSamples,out)
return(ProbSamples)
}
##########Sucrose Outliers First##########
CarbDataFrame$DFPosition <- rownames(CarbDataFrame)
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame$Sucrose),]
PosOutliers <- which(CarbDataFrame$Sucrose < 0)
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
#lets look at each potential outlier within the context of the the other examples of that variety. Start with Check1 and Check 2 since those will have the most other samples
CarbDataFrame[which(CarbDataFrame$Variety == "Check1"),Subset] #the -11 value is definitely an outlier
grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == "Check1"),'Sucrose'])#Grubs test confirms
CarbDataFrame[which(CarbDataFrame$Variety == "Check2"),Subset] #The -5 sucrose looks like an outlier
grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == "Check2"),'Sucrose']) #grub test confirms, less confidently. But other values of entry 113 are also wonked so remove
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#reporting out whats going on
print(paste("The Sucrose content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],11],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'Sucrose'])
if(!is.na(outlierData$p.value)){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
# print(paste(" an outlier among all",PosOutliersVar[i], "lines"))
#then test the total polysaccharide data
# outlierPolyData <- grubbs.test(outlierincontext$Total.Polysaccharides)
#if the total polysaccharide data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the sucrose and total sugar to NA
polySD <- sd(outlierincontext$Total.Polysaccharides)
polymean <- mean(outlierincontext$Total.Polysaccharides)
OutlierPoly <- CarbDataFrame$Total.Polysaccharides[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("Sucrose Nulled")
CarbDataFrame[PosOutliers[i],c(11:12)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is not an outlier. The Sample will have its sucrose and total sugar set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the sucrose to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
#Do the same for the other samples
while(counter < end){
#reporting out whats going on
print(paste("The Sucrose content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],11],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'Sucrose'])
if(!is.na(outlierData$p.value)){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
# print(paste(" an outlier among all",PosOutliersVar[i], "lines"))
#then test the total polysaccharide data
# outlierPolyData <- grubbs.test(outlierincontext$Total.Polysaccharides)
#if the total polysaccharide data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the sucrose and total sugar to NA
polySD <- sd(outlierincontext$Total.Polysaccharides)
polymean <- mean(outlierincontext$Total.Polysaccharides)
OutlierPoly <- CarbDataFrame$Total.Polysaccharides[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("Sucrose Nulled")
CarbDataFrame[PosOutliers[i],c(11:12)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is not an outlier. The Sample will have its sucrose and total sugar set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the sucrose to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
ProbSamples
##########WSP Outliers First##########
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame$WSP),]
PosOutliers <- which(CarbDataFrame$WSP < 0)
PosOutliersVar <- CarbDataFrame[which(CarbDataFrame$WSP < 0),"Variety"]
#Do the same for the other samples
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],11],2),"%. I is ",counter,sep = ""))
head(CarbDataFrame[PosOutliers, Subset])
#Do the same for the other samples
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],11],2),"%. I is ",counter,sep = ""))
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],8],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'WSP'])
outlierData
#if the outlier has a pvalue larger than the alpha, set the WSP to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("WSP Zeroed")
CarbDataFrame[PosOutliers[i],8]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. WSP has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],8],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'WSP'])
outlierData
outlierincontext
#Do the same for the other samples
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#Do the same for the other samples
while(counter < end){
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],8],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'WSP'])
if(!is.na(outlierData$p.value)){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
# print(paste(" an outlier among all",PosOutliersVar[i], "lines"))
#then test the total Glucose data
# outlierPolyData <- grubbs.test(outlierincontext$Total.Glucoses)
#if the total Glucose data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the WSP and total sugar to NA
#test total Glucose by seeing if its greater than standard deviations from the mean
polySD <- sd(outlierincontext$TGlucose)
polymean <- mean(outlierincontext$Glucose)
OutlierPoly <- CarbDataFrame$Glucose[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("WSP Nulled")
CarbDataFrame[PosOutliers[i],c(11:12)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is not an outlier. The Sample will have its WSP and total sugar set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the WSP to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("WSP Zeroed")
CarbDataFrame[PosOutliers[i],8]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. WSP has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("WSP Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. WSP has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
colnames(ProbSamples) <- c("Position", "NIRBase", "Samples","Starch","Total.Polysaccharides","WSP","Glucose","Fructose","WSP","Total.Sugar","Variety","Edit")
#if the total Glucose data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the WSP and total sugar to NA
#test total Glucose by seeing if its greater than standard deviations from the mean
polySD <- sd(outlierincontext$Glucose)
polymean <- mean(outlierincontext$Glucose)
OutlierPoly <- CarbDataFrame$Glucose[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("WSP Nulled")
CarbDataFrame[PosOutliers[i],c(11:12)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is not an outlier. The Sample will have its WSP and total sugar set to NA"))
}
CarbDataFrame[PosOutliers[i],c(7:8)]
CarbDataFrame[PosOutliers[i],c(7:8)]<- NA
CarbDataFrame <- CarbInfoExpandedDF
#lets tease out outliers
#Establish to remove list
toremove <- c()
#establish outlier record dataframe
ProbSamples <- data.frame()
# ProbSamples <- data.frame()
Subset <- c(1:2,CarbColumns, VarietyPos,22)
recordKeeping <- function(Action){
out <- data.frame(CarbDataFrame$DFPosition[i],CarbDataFrame[PosOutliers[i],c(1:2,CarbColumns, VarietyPos)],Action)
names(out) <- names(ProbSamples)
ProbSamples <- rbind(ProbSamples,out)
return(ProbSamples)
}
##########Sucrose Outliers First##########
CarbDataFrame$DFPosition <- rownames(CarbDataFrame)
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame$Sucrose),]
PosOutliers <- which(CarbDataFrame$Sucrose < 0)
PosOutliersVar <- CarbDataFrame[PosOutliers,"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
#lets look at each potential outlier within the context of the the other examples of that variety. Start with Check1 and Check 2 since those will have the most other samples
CarbDataFrame[which(CarbDataFrame$Variety == "Check1"),Subset] #the -11 value is definitely an outlier
grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == "Check1"),'Sucrose'])#Grubs test confirms
CarbDataFrame[which(CarbDataFrame$Variety == "Check2"),Subset] #The -5 sucrose looks like an outlier
grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == "Check2"),'Sucrose']) #grub test confirms, less confidently. But other values of entry 113 are also wonked so remove
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#Do the same for the other samples
while(counter < end){
#reporting out whats going on
print(paste("The Sucrose content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],11],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'Sucrose'])
if(!is.na(outlierData$p.value)){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
# print(paste(" an outlier among all",PosOutliersVar[i], "lines"))
#then test the total polysaccharide data
# outlierPolyData <- grubbs.test(outlierincontext$Total.Polysaccharides)
#if the total polysaccharide data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the sucrose and total sugar to NA
#test total Polysaccharide by seeing if its greater than standard deviations from the mean
polySD <- sd(outlierincontext$Total.Polysaccharides)
polymean <- mean(outlierincontext$Total.Polysaccharides)
OutlierPoly <- CarbDataFrame$Total.Polysaccharides[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("Sucrose Nulled")
CarbDataFrame[PosOutliers[i],c(11:12)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Polysaccharide content is not an outlier. The Sample will have its sucrose and total sugar set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the sucrose to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("Sucrose Zeroed")
CarbDataFrame[PosOutliers[i],11]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. Sucrose has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
##########WSP Outliers First##########
CarbDataFrame <- CarbDataFrame[order(CarbDataFrame$WSP),]
PosOutliers <- which(CarbDataFrame$WSP < 0)
PosOutliersVar <- CarbDataFrame[which(CarbDataFrame$WSP < 0),"Variety"]
head(CarbDataFrame[PosOutliers, Subset])
#Do the same for the other samples
counter <- 1
end <- length(PosOutliers)+1
i <- 1
#Do the same for the other samples
while(counter < end){
#reporting out whats going on
print(paste("The WSP content of sample ", CarbDataFrame$DFPosition[PosOutliers[counter]], " is ",round(CarbDataFrame[PosOutliers[counter],8],2),"%. I is ",counter,sep = ""))
#ok, so what is the outlier in the context of the variety
outlierincontext <- CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),Subset]
#how much of an outlier is it?
outlierData <- grubbs.test(CarbDataFrame[which(CarbDataFrame$Variety == PosOutliersVar[i]),'WSP'])
if(!is.na(outlierData$p.value)){
#if the outlier has a pvalue of less than alpha
if(outlierData$p.value < alpha)
{
# print(paste(" an outlier among all",PosOutliersVar[i], "lines"))
#then test the total Glucose data
# outlierPolyData <- grubbs.test(outlierincontext$Total.Glucoses)
#if the total Glucose data is an outlier, then add the sample to the to remove list. If the poly isn't an outlier, set the WSP and total sugar to NA
#test total Glucose by seeing if its greater than standard deviations from the mean
polySD <- sd(outlierincontext$Glucose)
polymean <- mean(outlierincontext$Glucose)
OutlierPoly <- CarbDataFrame$Glucose[PosOutliers[counter]]
if(polymean+3*polySD < OutlierPoly || polymean-3*polySD > OutlierPoly){
# if(outlierPolyData$p.value < alpha){
ProbSamples <- recordKeeping("Removed")
toremove <- c(toremove,CarbDataFrame$DFPosition[i])
CarbDataFrame <- CarbDataFrame[-PosOutliers[i],]
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is also an outlier. The Sample will be removed"))
#To account for the sample being removed, i and the end needs to be adjusted
counter = counter-1
end = end -1
}
if(polymean+3*polySD > OutlierPoly && polymean-3*polySD < OutlierPoly){
ProbSamples <- recordKeeping("WSP Nulled")
CarbDataFrame[PosOutliers[i],c(7:8)]<- NA
print(paste("It is an outlier among all",PosOutliersVar[i], "lines. It's Glucose content is not an outlier. The Sample will have its WSP and total Polysaccharides set to NA"))
}
}
#if the outlier has a pvalue larger than the alpha, set the WSP to 0
if(outlierData$p.value > alpha){
ProbSamples <- recordKeeping("WSP Zeroed")
CarbDataFrame[PosOutliers[i],8]<-0
print(paste("It is not an outlier among all",PosOutliersVar[i], "lines. WSP has been set to 0%, since biologically it can't be less than 0."))
}
}
if(is.na(outlierData$p.value)){
ProbSamples <- recordKeeping("WSP Zeroed")
CarbDataFrame[PosOutliers[i],8]<-0
print(paste("There are not enough",PosOutliersVar[i], "samples to determine if it is an outlier. WSP has been set to 0%, since biologically it can't be less than 0."))
}
i = i+1
counter = counter + 1
}
colnames(ProbSamples) <- c("Position", "NIRBase", "Samples","Starch","Total.Polysaccharides","WSP","Glucose","Fructose","WSP","Total.Sugar","Variety","Edit")
ProbSamples
write.csv(file = "Data/OutputtedData/EdittedSampleRecords.csv",ProbSamples)
#########################
###Establish Workspace###
#########################
#begin by establishing a new fresh work space
rm(list=ls())
library(dplyr)
library(lme4)
library(ggplot2)#for making pretty graphs
library(ggpmisc)
library(grDevices)
library(tidyr)
library(stringr)
library(psych)
library(reshape2)#for multiple groups in GGplot
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#Read in packages made for these codesets
source("R/CarbEquationComparison.R")
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
source("R/CarbOutlierCleanup.R")
#Read in the output from NIR
NIRStarchOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","st","pls.txt", sep = "")
NIRSugarOutput <-paste("Data/RawData/wsmdp_allsamples_inclval_wsmdp2021gl","su","pls.txt", sep = "")
#Read in the sample information
SampleInfo <- read.csv("Data/WSMDP_2014-2015_WINY_SampleInfo.csv")
#Fix the sample numbers that are labeled in the NY style e.g " 14A0255" or "15A0005" and change to just the row numbers
SampleInfo$Row <- SampleInfo$Sample.Number
SampleInfo$Row[which(nchar(SampleInfo$Row)>6)] <- substr(SampleInfo$Row[which(nchar(SampleInfo$Row)>6)],4,15)
tail(SampleInfo)
#Generate NIR Code
SampleInfo$NIRBase <- paste(substr(SampleInfo$year,3,4), ifelse(SampleInfo$location == "Wisconsin", "W","NY"), SampleInfo$Row,sep = "")
tail(SampleInfo)
#Assemble that together into a dataframe
CarbNIREqnOut <- data.frame(AgPredOutput(NIRStarchOutput,NIRSugarOutput,condense = TRUE))
#Cleanup the NIR output and add rows corresponding to their year and location
CarbNIREqnOut <- separate(CarbNIREqnOut, Samples, into = c("Year","Row","Rep"), sep = "([W.Y.-])", remove = FALSE)
#how does that look
head(CarbNIREqnOut)
CarbNIREqnOut$Location <- "W"
CarbNIREqnOut$Location[which(grepl("N",CarbNIREqnOut$Year))] = "NY"
CarbNIREqnOut$Year<-str_remove(CarbNIREqnOut$Year,"N")
CarbNIREqnOut <- CarbNIREqnOut[-c(1:2),]
tail(CarbNIREqnOut)
# CarbNIREqnOut$Year <- as.numeric(CarbNIREqnOut$Year)
CarbNIREqnOut$NIRBase <- paste(CarbNIREqnOut$Year,CarbNIREqnOut$Location, CarbNIREqnOut$Row, sep = "")
#Visualize the distribution of the traits from the NIR predicted outputs
summary(CarbNIREqnOut)
colnames(CarbNIREqnOut)
setdiff(CarbNIREqnOut$NIRBase,SampleInfo$NIRBase)
setdiff(SampleInfo$NIRBase,CarbNIREqnOut$NIRBase)
CarbInfoExpandedDF <- merge(CarbNIREqnOut,SampleInfo, by = "NIRBase")
head(CarbInfoExpandedDF)
summary(CarbInfoExpandedDF)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_wOutliers_Histogram.png")
par(mfrow=c(3,3))
for(i in 6:12){
hist(CarbInfoExpandedDF[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_wOUtliers_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_wOutliers_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CarbInfoExpandedDF, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
CleanedInfo <- CarbOutlierCleanup(CarbInfoExpandedDF)
#Visualize the Total Traits
png("Figures/WSMDP_Carb_AllTrait_NIREqnOut_Histogram.png")
par(mfrow=c(3,3))
for(i in 6:12){
hist(CleanedInfo[,i],main = paste("Histogram of",colnames(CarbNIREqnOut[i])), xlab = colnames(CarbNIREqnOut[i]))
}
dev.off()
png("Figures/WSMDP_AllNIRPred_Starch_byEndo_Boxplot.png", width = 750, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
png("Figures/WSMDP_AllNIRPred_Sugar_byEndo_Boxplot.png", width = 1000, height = 500)
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dev.off()
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Glucose', 'Fructose', 'Sucrose', 'Total.Sugar') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Sugar Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
dat.m <- melt(CleanedInfo, id.vars = "endo", measure.vars = c('Starch', 'WSP', 'Total.Polysaccharides') )
p <- ggplot(dat.m) +
geom_boxplot(aes(x = endo, y = value, color = variable))
p + labs(title = "Polysaccharide Content by Endosperm Type") + xlab("Endosperm Mutant") + ylab("Percentage of Kernel")
