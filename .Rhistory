#cut off the numbers at the end of the sample.id that don't mean things to humans
holdtrunc<-gsub(PCA$sample.id, pattern = ":.*", replacement = "")
#only include the samples that are in genoinfo
#this is a round about way of looking at only the genotype info I have for the things planted in this trial
#eliminate inbreds tested in other experiments
genoinfo2014only <- genoinfo[which(genoinfo$Planting20142015 == 1),]
#look at what inbreds have the same genoname in both the seq file and the data summary
matching <- data.frame("GenoName" = unique(PCA$sample.id[na.omit(match(genoinfo2014only$GenoName, holdtrunc))]))
#hold the names of the inbreds I have seq info for
holdnocol <- unique(holdtrunc[na.omit(match(genoinfo2014only$GenoName, holdtrunc))])
#combine the geno name with the endosperm mutant time from the genoinfo file
matching$endo <- genoinfo2014only$endo[match(holdnocol,genoinfo2014only$GenoName)]
#conduct pca again with only those samples
PCA <- snpgdsPCA(PreLDGeno, sample.id = matching$GenoName, snp.id = PostLDGeno.id)
pc.perc <- PCA$varprop*100
head(round(pc.perc,2))
ptm <- proc.time()
#visualize the PCA with ld pruned snps and only the tested samples
PCAFigureCreation(PCA,pc.perc,matching,infilename,"endo")
# PCAFigureCreation(PCA,pc.perc,matching,filename,"Program")
# PCAFigureCreation(PCA,pc.perc,matching,filename,"Region")
proc.time() - ptm
#########################
### Close Snp Relate ###
#########################
outfilename <- "WSMDP_SeqG"
outfile <- paste("Data/RawData/",outfilename ,sep="")
snpgdsGDS2PED(PreLDGeno, outfile, snp.id = PostLDGeno.id)
snpgdsClose(PreLDGeno)
#########################
### GWAS Time ###
#########################
#read in genetic info post MAF
Seq <- "SeqG"
hmppath <- paste0("Data/RawData/WSMDP_",Seq,".hmp.txt")
# hmppath <- "Data/RawData/WSMDP_SCMV_SeqB.hmp.txt"
# hmppath <- "Data/RawData/WSMDP_SeqC.hmp.txt"
geno <- fread(hmppath,skip = "rs#")
#########################
###Establish Workspace###
#########################
#begin by establishing a new fresh work space
rm(list=ls())
library(dplyr)
library(lme4)
library(ggplot2)#for making pretty graphs
library(ggpmisc)
library(grDevices)
library(tidyr) #for separate
library(stringr)#str_remove
library(psych)
library(reshape2)#for multiple groups in GGplot
library(outliers)
library(lattice)
library(PopGenome)
library(data.table) #for fread
# BiocManager::install("VariantAnnotation")
library("VariantAnnotation")
library("snpStats")
library("compiler") #needed to make GAPIT work
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/FarmCPU/FarmCPU_functions.txt")
library("devtools")#for intsalling from github
install_github("jendelman/GWASpoly")
library(GWASpoly)#for running Gwas
# library("bigmemory") #to make a matrix big
# library(rrBLUP)
library(emmeans)
library(bigmemory)
library(MuMIn)
library(SNPRelate)
library(beepr)#beep when code is done
getwd()
setwd("C:/Users/LHislop/Documents/GitHub/WSMDP_Carb")
#Read in packages made for these codesets
source("R/CarbEquationComparison.R")
source("R/PredictionCulling.R")
source("R/MixedEndoEqnValidation.R")
source("R/AgPredOutput.R")
source("R/CarbOutlierCleanup.R")
source("R/CarbDataFrameVis.R")
source("R/GWASPolyVis.R")
source("R/GWASPolyRunner.R")
source("R/WritePhenoGenotoFile.R")
source("R/PCAFigureCreation.R")
source("R/hmpToNumeric.R")
#########################
###Read in sample data###
#########################
#Read in the sample information.
#this file contains information about the superblock, row, column data for each sample
BookInfo <- read.csv("Data/20142015_WSMDP_PlantingInfo_Condensation.csv")
#There are some duplicates in planting info condensation. Remove duplicates
BookInfo <- BookInfo[!duplicated(BookInfo$SampleLabel),]
length(unique(BookInfo$Inbred))
#this file containes the year, location,variety and endosperm of every sample
SampleInfo <- read.csv("Data/WSMDP_2014-2015_WINY_SampleInfo.csv")
#Fix the sample numbers that are labeled in the NY style e.g " 14A0255" or "15A0005" and change to just the row numbers
SampleInfo$Row <- SampleInfo$Sample.Number
SampleInfo$Row[which(nchar(SampleInfo$Row)>6)] <- substr(SampleInfo$Row[which(nchar(SampleInfo$Row)>6)],4,15)
tail(SampleInfo)
#Generate NIR Code. NIR codes are all YearLocationRow - Rep
SampleInfo$NIRBase <- paste(substr(SampleInfo$year,3,4), ifelse(SampleInfo$location == "Wisconsin", "W","NY"), SampleInfo$Row,sep = "")
tail(SampleInfo)
str(unique(SampleInfo$Variety))
summary.factor(SampleInfo$endo)
length(unique(SampleInfo$Variety))
setdiff(unique(BookInfo$Inbred),unique(SampleInfo$Variety))
#########Read in Wetlab data##########
wetLabStarch <- read.csv("Data/RawData/WSMDP_Wetlab_Starchs.csv")
wetLabStarchNoCtrl<- wetLabStarch[which(wetLabStarch$Sample_ID != "control"),c(5,9:11)]
wetLabStarchCtrl<- wetLabStarch[which(wetLabStarch$Sample_ID == "control"),c(5,9:11)]
summary(wetLabStarchNoCtrl)
SD(wetLabStarchNoCtrl)
summary(wetLabStarchCtrl)
SD(wetLabStarchCtrl)
wetLabSugar <- read.csv("Data/RawData/WSMDP_Wetlab_Sugars.csv")
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != "#DIV/0!"),]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
cols <- c("Ave.Glucose","Ave.Fructose","Ave.Sucro","Ave.Total")
wetLabSugarNoCtrl[cols] <- lapply(wetLabSugarNoCtrl[cols], factor)
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:22,24:33)]
summary(wetLabSugarNoCtrl)
SD(wetLabSugarNoCtrl)
summary(wetLabSugarCtrl)
SD(wetLabSugarCtrl)
cols <- c("Ave.Glucose","Ave.Fructose","Ave.Sucro","Ave.Total")
wetLabSugarNoCtrl[cols] <- lapply(wetLabSugarNoCtrl[cols], factor)
wetLabSugarNoCtrl
summary(wetLabSugarNoCtrl)
wetLabSugarNoCtrl[cols] <- lapply(wetLabSugarNoCtrl[cols], numeric)
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl[cols] <- as.numeric(wetLabSugarNoCtrl[cols])
cols
wetLabSugarNoCtrl[cols] <- lapply(wetLabSugarNoCtrl[cols], as.numeric)
summary(wetLabSugarNoCtrl)
cols <- c("Ave.Glucose","Ave.Fructose","Ave.Sucro","Ave.Total")
wetLabSugar[cols] <- lapply(wetLabSugar[cols], as.numeric)
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != "#DIV/0!"),]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:22,24:33)]
summary(wetLabSugarNoCtrl)
SD(wetLabSugarNoCtrl)
summary(wetLabSugarCtrl)
SD(wetLabSugarCtrl)
#########Read in the output from NIR##########
####Copied pasted and modified from Hislop_carb_eqn_validation.R
#6 files types. The starch and sugar predictions and the equations made by calibrating with only high wsp lines, high wsp var sug, high wsp high sug
CarbCombos <- c("hwspsu","hwspst","lwspwfsu","lwspwfst","lwspnfsu","lwspwfst")
#set columns from char to numeric
cols <- c("Ave.Glucose","Ave.Fructose","Ave.Sucro","Ave.Total")
wetLabSugar[cols] <- lapply(wetLabSugar[cols], as.numeric)
View(wetLabSugar)
View(wetLabSugar)
#Separate out just useful data
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != "#DIV/0!"),]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
#Separate out just useful data
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != "#DIV/0!"),]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
View(wetLabSugarNoCtrl)
View(wetLabSugarNoCtrl)
#Separate out just useful data
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:22,24:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
#Separate out just controls
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:22,24:33)]
#Establish File to Hold stats
wetLabFile <- paste0("Data/OutputtedData/WSMDP_Wetlab_stats.txt")
#Write Starch Stats to File
out <- summary(wetLabStarchNoCtrl)
cat(out, file=wetLabFile, sep="\n", append=FALSE)
out <- SD(wetLabStarchNoCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- summary(wetLabStarchCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- SD(wetLabStarchCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#Write Sugar Stats to File
out <- summary(wetLabSugarNoCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- SD(wetLabSugarNoCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- summary(wetLabSugarCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- SD(wetLabSugarCtrl)
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out
#Write Starch Stats to File
out <- summary(wetLabStarchNoCtrl)
out
#Write Starch Stats to File
out <- capture.output(summary(wetLabStarchNoCtrl))
out
cat(out, file=wetLabFile, sep="\n", append=FALSE)
#Write Starch Stats to File
out <- paste("wetLabStarchNoCtrl",capture.output(summary(wetLabStarchNoCtrl)), sep = "\n")
out
#Establish File to Hold stats
wetLabFile <- paste0("Data/OutputtedData/WSMDP_Wetlab_stats.txt")
#Write Starch Stats to File
cat("Starch Wetlab Data", file=wetLabFile, sep="\n", append=FALSE)
out <- capture.output(summary(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Starch Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#Write Sugar Stats to File
cat("Sugar Wetlab Data", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Sugar Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
str(wetLabSugar)
wetLabSugarConj <- rbind( wetLabSugar$Rep.A.Glucose, wetLabSugar$Rep.B.Glucose, wetLabSugar$Rep.B.Glucose )
View(wetLabSugarConj)
View(wetLabSugarConj)
wetLabSugarConj <- cbind( wetLabSugar$Rep.A.Glucose, wetLabSugar$Rep.B.Glucose, wetLabSugar$Rep.B.Glucose )
?rbind
wetLabSugarConj <- append( wetLabSugar$Rep.A.Glucose, wetLabSugar$Rep.B.Glucose, wetLabSugar$Rep.B.Glucose )
wetLabSugarConj
str(wetLabSugar)
wetLabSugarConj$Glucose <- append(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
wetLabSugarConj$Fructose <- append(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
wetLabSugarConj$Sucro <- append(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
wetLabSugarConj$Total <- append(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
as.data.frame(wetLabSugarConj )
wetLabSugarConj <- as.data.frame(wetLabSugarConj )
wetLabSugarConj$Glucose <- append(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
wetLabSugarConj[1] <- append(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
append(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
wetLabSugarNoCtrl$Rep.B.Glucose
wetLabSugarNoCtrl$Rep.C.Glucose
wetLabSugarConj <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
wetLabSugarConj
wetLabSugarConj$Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
wetLabSugarConj$Fructose <- c(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
wetLabSugarConj$Sucro <- c(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
wetLabSugarConj$Total <- c(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
wetLabSugarConj
View(wetLabSugarConj)
View(wetLabSugarConj)
wetLabSugarCon$Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
wetLabSugarConj <- as.dataframe(Glucose,Fructose,Sucro,Total)
wetLabSugarConj <- as.data.frame(Glucose,Fructose,Sucro,Total)
wetLabSugarConj
?as.data.fram
?as.data.frame
wetLabSugarConj <- data.frame(Glucose,Fructose,Sucro,Total)
Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
Total
str(wetLabSugarNoCtrl)
#Separate out just useful data
wetLabSugarNoCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num != "Control"),c(11,15:23,25:33)]
wetLabSugarNoCtrl<- wetLabSugarNoCtrl[which(wetLabSugarNoCtrl$Ave.Total != ""),]
Glucose <- c(wetLabSugarNoCtrl$Rep.A.Glucose, wetLabSugarNoCtrl$Rep.B.Glucose, wetLabSugarNoCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarNoCtrl$Rep.A.Fructose, wetLabSugarNoCtrl$Rep.B.Fructose, wetLabSugarNoCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarNoCtrl$Rep.A.Sucro, wetLabSugarNoCtrl$Rep.B.Sucro, wetLabSugarNoCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarNoCtrl$Rep.A.Total, wetLabSugarNoCtrl$Rep.B.Total, wetLabSugarNoCtrl$Rep.C.Total )
wetLabSugarConj <- data.frame(Glucose,Fructose,Sucro,Total)
summary(wetLabSugarConj)
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:22,24:33)]
Glucose <- c(wetLabSugarCtrl$Rep.A.Glucose, wetLabSugarCtrl$Rep.B.Glucose, wetLabSugarCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarCtrl$Rep.A.Fructose, wetLabSugarCtrl$Rep.B.Fructose, wetLabSugarCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarCtrl$Rep.A.Sucro, wetLabSugarCtrl$Rep.B.Sucro, wetLabSugarCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarCtrl$Rep.A.Total, wetLabSugarCtrl$Rep.B.Total, wetLabSugarCtrl$Rep.C.Total )
wetLabSugarControlConj <- data.frame(Glucose,Fructose,Sucro,Total)
#Separate out just controls
wetLabSugarCtrl<- wetLabSugar[which(wetLabSugar$Variety_Num == "Control"),c(11,15:23,25:33)]
str(wetLabSugarCtrl)
Glucose <- c(wetLabSugarCtrl$Rep.A.Glucose, wetLabSugarCtrl$Rep.B.Glucose, wetLabSugarCtrl$Rep.C.Glucose )
Fructose <- c(wetLabSugarCtrl$Rep.A.Fructose, wetLabSugarCtrl$Rep.B.Fructose, wetLabSugarCtrl$Rep.C.Fructose )
Sucro <- c(wetLabSugarCtrl$Rep.A.Sucro, wetLabSugarCtrl$Rep.B.Sucro, wetLabSugarCtrl$Rep.C.Sucro )
Total <- c(wetLabSugarCtrl$Rep.A.Total, wetLabSugarCtrl$Rep.B.Total, wetLabSugarCtrl$Rep.C.Total )
wetLabSugarControlConj <- data.frame(Glucose,Fructose,Sucro,Total)
wetLabSugarCtrl
#Write Starch Stats to File
cat("Starch Wetlab Data", file=wetLabFile, sep="\n", append=FALSE)
out <- capture.output(summary(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchNoCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Starch Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabStarchCtrl))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#Write Sugar Stats to File
cat("Sugar Wetlab Data", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
cat("Sugar Wetlab Controls", file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(summary(wetLabSugarControlConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
out <- capture.output(SD(wetLabSugarControlConj))
cat(out, file=wetLabFile, sep="\n", append=TRUE)
#########Read in the output from NIR##########
####Copied pasted and modified from Hislop_carb_eqn_validation.R
#6 files types. The starch and sugar predictions and the equations made by calibrating with only high wsp lines, high wsp var sug, high wsp high sug
CarbCombos <- c("hwspsu","hwspst","lwspwfsu","lwspwfst","lwspnfsu","lwspwfst")
#establish DF to hold the file readins
CarbDF <- list()
#iterate throught the 5 file types and read them in. skip the first 9 lines which are all file descriptors, no the data
for(i in 1:6){CarbDF[[i]] <- read.csv(paste("Data/RawData/wsmdp",CarbCombos[i],"pls_predA-G.txt",sep = ""), skip = 9)}
#########################
###Manipulate and clean sample data###
#########################
########now match up these predicted values with the sample info and mash it all up into one########
#combine the starch and sugar files for each equation type. Condense takes all the repeated scans of the same sample and averages them
HWSPsDF <- AgPredOutput(StarchDF = CarbDF[[1]], SugDF = CarbDF[[2]], condense = TRUE)
LWSPWFsDF <- AgPredOutput(StarchDF = CarbDF[[3]], SugDF = CarbDF[[4]], condense = TRUE)
LWSPNFsDF <- AgPredOutput(StarchDF = CarbDF[[5]], SugDF = CarbDF[[6]], condense = TRUE)
InfoCombination <- function(NIRDF, SampleInfoDF, BookInfoDF){
OutDF <- NIRDF
OutDF$endo <- SampleInfoDF$endo[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
OutDF$Variety <- SampleInfoDF$Variety[match(NIRDF$NIRBase, SampleInfoDF$NIRBase, nomatch = NA)]
OutDF$BookInbred <- BookInfoDF$Inbred[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$PlotNum <- NIRDF$Row
OutDF$SampleRep <- NIRDF$Rep
OutDF$superblock <- BookInfoDF$superblock[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$block <- BookInfoDF$block[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$EnviRep <- BookInfoDF$rep[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Row <- BookInfoDF$Row[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Col <- BookInfoDF$Col[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$Check <- BookInfoDF$Check[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsFill <- BookInfoDF$IsFill[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
OutDF$IsExperimental <- BookInfoDF$IsExperimental[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)]
#add in a year/location environment factor
OutDF$Envi <- paste0(BookInfoDF$Year[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)], BookInfoDF$Location[match(NIRDF$NIRBase, BookInfoDF$NIRBase, nomatch = NA)])
return(OutDF)
}
HWSPsDF <- InfoCombination(HWSPsDF,SampleInfo,BookInfo)
LWSPWFsDF <- InfoCombination(LWSPWFsDF,SampleInfo,BookInfo)
LWSPNFsDF <- InfoCombination(LWSPNFsDF,SampleInfo,BookInfo)
#Eliminate irrelivant endosperm mutants from each df. We don't want to include sh2 samples that were predicted by the HWSP calibrated equations
#should sh2i samples be estimated by the sh2 calibrated equations or the other calibrated equation?
HWSPs <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | (is.na(HWSPsDF$endo)& (HWSPsDF$Year== "15"|HWSPsDF$Year == "14"))),]
# HWSPs <- HWSPsDF[which(HWSPsDF$endo == "su1" | HWSPsDF$endo == "se" | is.na(HWSPsDF$endo)),]
LWSPWFs <- LWSPWFsDF[which(LWSPNFsDF$endo != "se" & LWSPNFsDF$endo != "su1"),]
LWSPNFs <- LWSPNFsDF[which(LWSPNFsDF$endo == "sh2" | LWSPNFsDF$endo == "sh2i"),]
# #lets look at the validation data that I predicted from kahtleen and Jareds data and output it for further analysis
# jared <- HWSPsDF[which(HWSPsDF$Year == "sc"),]
# write.csv(jared, file = "Data/OutputtedData/JaredsPredictedLineswHWSPeqn.csv")
# kathleen <- HWSPsDF[which(HWSPsDF$Year != "13"&HWSPsDF$Year != "14"&HWSPsDF$Year != "15"&HWSPsDF$Year != "sc"),]
# write.csv(kathleen,file = "Data/OutputtedData/KathleenPredictedLineswHWSPeqn.csv")
#
########mash it all together ######
#All the predictions with the field lines
CarbInfoExpandedWFDF <- rbind(HWSPs,LWSPWFs)
#all the predictions without the field lines
CarbInfoExpandedNFDF <- rbind(HWSPs,LWSPNFs)
linearmodel <- function(SampleDFtoModel,TitleAddendum){
SampleDFtoModel$superblock <- as.factor(SampleDFtoModel$superblock)
SampleDFtoModel$Col <- as.factor(SampleDFtoModel$Col)
SampleDFtoModel$Row <- as.factor(SampleDFtoModel$Row)
SampleDFtoModel$Year <- as.factor(SampleDFtoModel$Year)
SampleDFtoModel$Envi <- as.factor(SampleDFtoModel$Envi)
SampleDFtoModel$Check <- as.factor(SampleDFtoModel$Check)
SampleDFtoModel$block <- as.factor(SampleDFtoModel$block)
SampleDFtoModel$Rep <- as.factor(SampleDFtoModel$Rep)
SampleDFtoModel$endo <- as.factor(SampleDFtoModel$endo)
SampleDFtoModel$PlotNum <- as.factor(SampleDFtoModel$PlotNum)
statsfile <- paste0("Data/OutputtedData/WSMDP_CarbPheno_stats_",TitleAddendum,".txt")
cat(paste0("Phenotypic Statistics for the Carbohydrates of ",TitleAddendum," Through Mixed Linear Modeling."), file=statsfile, sep="\n", append=FALSE)
blupHolder <- data.frame("Variety" = sort(unique(SampleDFtoModel$BookInbred)))
c1 <- which(colnames(SampleDFtoModel)=="Starch")
c2 <- which(colnames(SampleDFtoModel)=="Total.Sugar")
carbs <- colnames(SampleDFtoModel)[c1:c2]
VarDF <- data.frame("Carb" = colnames(SampleDFtoModel)[5:11],"Variety" = rep(NA,7),"Envi" = rep(NA,7),"Variety:Envi" = rep(NA,7),  "superblock" = rep(NA,7), "Col" = rep(NA,7),"Row" = rep(NA,7),"block" = rep(NA,7),"Residuals"= rep(NA,7))
for(j in 1:length(carbs)){
#output the statistics about this trait
summary <- summary(SampleDFtoModel[,c1+j-1], )
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpastecheck<-  paste0(carbs[j], " ~ (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpastecheck<-  paste0(carbs[j], " ~ Check + (1|BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpastecheck, file=statsfile, sep="\n", append=TRUE)
model <- lmer(modelpastecheck,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(model@optinfo$optimizer=="nloptwrap")) {
model <- update(model, control=strict_tol)
}
RandomEffects <- ranef(model)
tempBlup <- data.frame("Variety" = rownames(RandomEffects$BookInbred), "BLUP" = RandomEffects$BookInbred)
blupHolder <- merge(blupHolder, tempBlup, by = "Variety", all = TRUE)
colnames(blupHolder)[j+1] <- paste0(carbs[j],".BLUP")
# CheckAssumptions
png(paste0("Figures/WSMDP_LinearModel_assumptions_",TitleAddendum,"_", carbs[j], ".png"), width = 1000, height = 500)
par(mfrow=c(1,3))
# Model Fit with REML
plot(fitted(model), residuals(model), pch=19, col="dark blue", ylab="Residuals", xlab="Predicted")
abline(h=0,col="red", lwd=1, lty=1)
# histogram of residuals
hist(residuals(model),main=paste0("Histogram of ", carbs[j]," residuals from ", TitleAddendum),freq=F, xlab="Residuals", ylab= "Freq", col="palegreen", col.main="darkblue")
x=seq(-5e-15,9e-15,5e-15)
curve(dnorm(x,mean(residuals(model)),sd(residuals(model))),add=T,lwd=2, col="red", lty=1)
# qq plot
qqnorm(residuals(model), pch=19, col="dark blue", col.lines="red", xlab="Pred quantiles", ylab="Obs quantiles")
dev.off()
# Summary of random effects
summary <- summary(model, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
# Write out residuals from ANOVA
write.table(resid(model), paste0("Data/OutputtedData/WSMDP_LinearModel_residuals_",TitleAddendum,"_", carbs[j], ".csv"), col.names=F, row.names=F, sep=",")
#calculate model R2
r2 <- r.squaredGLMM(model)
out <- capture.output(r2[2])
cat(paste("The r^2 value of this model for", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
# Calculate hertiability
model_variances <- as.data.frame(VarCorr(model))
#broad sence heritability calculated as variance of genotype/ (variance of geno + var of gxe / num of enviornments + var of error/num of replicates and environ)
h2 <- model_variances$vcov[2]/(model_variances$vcov[2]+(model_variances$vcov[1]/4)+(model_variances$vcov[8]/8))
out <- capture.output(h2)
cat(paste("The heritability of", carbs[j] ,"is", out), file= statsfile, sep="\n", append=TRUE)
#Compare model with one with Endosperm
cat("Model Comparison, with and without Endosperm Term", file=statsfile, sep="\n", append=TRUE)
#####Modeling
modelpasteendo<-  paste0(carbs[j], " ~ (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
# Use check if there enough checks in the model set
if(length(unique(SampleDFtoModel$Check))>1){
modelpasteendo<-  paste0(carbs[j], " ~ Check + (1|endo/BookInbred) + (1|BookInbred:Envi) + (1|Envi/superblock/block) + (1|Envi:Row) + (1|Envi:Col)")
}
cat(modelpasteendo, file=statsfile, sep="\n", append=TRUE)
modelendo <- lmer(modelpasteendo,
data=SampleDFtoModel, REML = TRUE)
# Decreasing stopping tolerances
strict_tol <- lmerControl(optCtrl=list(xtol_abs=1e-8, ftol_abs=1e-8))
if (all(modelendo@optinfo$optimizer=="nloptwrap")) {
modelendo <- update(modelendo, control=strict_tol)
}
# Summary of random effects
summary <- summary(modelendo, correlation=FALSE)
out <- capture.output(summary)
cat(out, file=statsfile, sep="\n", append=TRUE)
formula1 <- paste0(colnames(SampleDFtoModel)[j+4],"~ BookInbred*Envi  + superblock%in%Envi + superblock%in%block%in%Envi+ Row%in%Envi+ Col%in%Envi")
fit1 <- lm(formula1,data=SampleDFtoModel)
AIC1 <- extractAIC(fit1)
AIC1
summary(fit1)$r.square
print(anova(fit1))
out <- anova(fit1)
SStotal <- sum(out$`Sum Sq`)
for(i in 1:8){
#variance explained is caluclated by the sum of squares divided by the sum of squares total
VarDF[j,i+1] <- (out$`Sum Sq`[i]/SStotal)}
}
#######Graph the different variances explained by different factors######
VarDFMelt <- reshape2::melt(VarDF)
png(paste("Figures/WSMDP_AllNIRPred_MixedEqn_PercentVarianceExplainedby_Factors_",TitleAddendum,".png",sep=""), width = 1000, height = 500)
barchart(~value|variable, group = factor(Carb), data= VarDFMelt,reverse.rows = FALSE,main = "Percent Phenotypic Variance Explained",layout = c(8,1),
key = simpleKey(text = colnames(SampleDFtoModel)[5:11],
rectangles = TRUE, points = FALSE, space = "right"))
dev.off()
# Write out BLUPs for Genotypes
write.table(blupHolder, file=paste0("Data/OutputtedData/WSMDP_CarbPheno_InbredBLUPS_",TitleAddendum,".txt"), col.names=T, row.names=F, sep=",")
return(blupHolder)
}
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
CleanedInfoHWSP_wexcess <- CarbOutlierCleanup(HWSPs,"HWSP",alpha = 0.05)
CleanedInfoLWSPNF_wexcess <- CarbOutlierCleanup(LWSPNFs,"LWSPNFs",alpha = 0.05)
CleanedInfoLWSPWF_wexcess <- CarbOutlierCleanup(LWSPWFs,"LWSPWFs",alpha = 0.05)
CleanedInfoHWSP <- subset(CleanedInfoHWSP_wexcess, !is.na(IsExperimental))
CleanedInfoLWSPNF <- subset(CleanedInfoLWSPNF_wexcess, !is.na(IsExperimental))
CleanedInfoLWSPWF <- subset(CleanedInfoLWSPWF_wexcess, !is.na(IsExperimental))
HWSPBlups <- linearmodel(CleanedInfoHWSP,"CleanedOutliersHWSP")
LWSPNFBlups <- linearmodel(CleanedInfoLWSPNF,"CleanedOutliersLWSPNF")
LWSPWFBlups <- linearmodel(CleanedInfoLWSPWF,"CleanedOutliersLWSPWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
CleanedInfoNF
#visualize these data sets pre cleaning
CarbDataFrameVis(CarbInfoExpandedWFDF,"WithField_WithOutliers")
CarbDataFrameVis(CarbInfoExpandedNFDF,"NoField_WithOutliers")
#clean up the predictive data frames. Reassign or delete outliers
CleanedInfoWF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedWFDF,"WF",alpha = 0.05)
CleanedInfoNF_wexcess <- CarbOutlierCleanup(CarbInfoExpandedNFDF,"NF",alpha = 0.05)
CleanedInfoWF <- subset(CleanedInfoWF_wexcess, !is.na(IsExperimental))
CleanedInfoNF <- subset(CleanedInfoNF_wexcess, !is.na(IsExperimental))
write.csv(file = "Data/OutputtedData/CleanedInfoWFOutput.csv",CleanedInfoWF)
write.csv(file = "Data/OutputtedData/CleanedInfoNFOutput.csv",CleanedInfoNF)
WFBlups <- linearmodel(CleanedInfoWF,"CleanedOutliersWF")
NFBlups <- linearmodel(CleanedInfoNF,"CleanedOutliersNF")
